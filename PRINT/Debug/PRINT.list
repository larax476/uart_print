
PRINT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005504  08005504  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800550c  0800550c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000070  08005584  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08005584  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6a3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e27  00000000  00000000  0002e743  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  00030570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  000311b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029f8d  00000000  00000000  00031d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a6e8  00000000  00000000  0005bc95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001007ca  00000000  00000000  0006637d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d0  00000000  00000000  00166bc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005458 	.word	0x08005458

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08005458 	.word	0x08005458

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fb7c 	bl	8000cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f835 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f92b 	bl	8000818 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c2:	f000 f8b7 	bl	8000734 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 80005c6:	f000 f903 	bl	80007d0 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
  int time=0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	4811      	ldr	r0, [pc, #68]	; (8000618 <main+0x68>)
 80005d4:	f000 fe78 	bl	80012c8 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d1f7      	bne.n	80005ce <main+0x1e>
  {
	  time++;
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
	  sprintf((char*) t,"%d\n\r",time);
 80005e4:	463b      	mov	r3, r7
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	490c      	ldr	r1, [pc, #48]	; (800061c <main+0x6c>)
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fb2e 	bl	8004c4c <siprintf>
	  HAL_UART_Transmit(&hlpuart1,t, strlen((char*)t), 20);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe04 	bl	8000200 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4639      	mov	r1, r7
 80005fe:	2314      	movs	r3, #20
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x70>)
 8000602:	f002 fc1f 	bl	8002e44 <HAL_UART_Transmit>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <main+0x74>)
 800060c:	f000 fe8c 	bl	8001328 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f000 fbbf 	bl	8000d94 <HAL_Delay>
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000616:	e7da      	b.n	80005ce <main+0x1e>
 8000618:	48000800 	.word	0x48000800
 800061c:	08005470 	.word	0x08005470
 8000620:	20000098 	.word	0x20000098
 8000624:	48000400 	.word	0x48000400

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0bc      	sub	sp, #240	; 0xf0
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fb00 	bl	8004c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2294      	movs	r2, #148	; 0x94
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 faf2 	bl	8004c3c <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000658:	2000      	movs	r0, #0
 800065a:	f000 ff01 	bl	8001460 <HAL_PWREx_ControlVoltageScaling>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000664:	f000 f98e 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000688:	231e      	movs	r3, #30
 800068a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 ff9f 	bl	80015e8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006b0:	f000 f968 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fbaa 	bl	8001e34 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f94d 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
 80006ea:	f242 0320 	movw	r3, #8224	; 0x2020
 80006ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000702:	230c      	movs	r3, #12
 8000704:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000712:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000716:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fe3a 	bl	8002394 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000726:	f000 f92d 	bl	8000984 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	37f0      	adds	r7, #240	; 0xf0
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 800073a:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <MX_LPUART1_UART_Init+0x94>)
 800073c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 800077e:	f002 fb11 	bl	8002da4 <HAL_UART_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000788:	f000 f8fc 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 8000790:	f003 ff83 	bl	800469a <HAL_UARTEx_SetTxFifoThreshold>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800079a:	f000 f8f3 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 80007a2:	f003 ffb8 	bl	8004716 <HAL_UARTEx_SetRxFifoThreshold>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007ac:	f000 f8ea 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_LPUART1_UART_Init+0x98>)
 80007b2:	f003 ff39 	bl	8004628 <HAL_UARTEx_DisableFifoMode>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007bc:	f000 f8e2 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000098 	.word	0x20000098
 80007c8:	40008000 	.word	0x40008000
 80007cc:	20000124 	.word	0x20000124

080007d0 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 80007d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007da:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 80007de:	220c      	movs	r2, #12
 80007e0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8000802:	f000 fdaa 	bl	800135a <HAL_HCD_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USB_OTG_FS_HCD_Init+0x40>
  {
    Error_Handler();
 800080c:	f000 f8ba 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200001b0 	.word	0x200001b0

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b50      	ldr	r3, [pc, #320]	; (8000970 <MX_GPIO_Init+0x158>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a4f      	ldr	r2, [pc, #316]	; (8000970 <MX_GPIO_Init+0x158>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <MX_GPIO_Init+0x158>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <MX_GPIO_Init+0x158>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a49      	ldr	r2, [pc, #292]	; (8000970 <MX_GPIO_Init+0x158>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <MX_GPIO_Init+0x158>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <MX_GPIO_Init+0x158>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a43      	ldr	r2, [pc, #268]	; (8000970 <MX_GPIO_Init+0x158>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b41      	ldr	r3, [pc, #260]	; (8000970 <MX_GPIO_Init+0x158>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MX_GPIO_Init+0x158>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a3d      	ldr	r2, [pc, #244]	; (8000970 <MX_GPIO_Init+0x158>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <MX_GPIO_Init+0x158>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <MX_GPIO_Init+0x158>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <MX_GPIO_Init+0x158>)
 8000894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <MX_GPIO_Init+0x158>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80008a6:	f000 fe8f 	bl	80015c8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a30      	ldr	r2, [pc, #192]	; (8000970 <MX_GPIO_Init+0x158>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <MX_GPIO_Init+0x158>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008c8:	482a      	ldr	r0, [pc, #168]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008ca:	f000 fd15 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4829      	ldr	r0, [pc, #164]	; (8000978 <MX_GPIO_Init+0x160>)
 80008d4:	f000 fd10 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4823      	ldr	r0, [pc, #140]	; (800097c <MX_GPIO_Init+0x164>)
 80008ee:	f000 fb59 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008f2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <MX_GPIO_Init+0x15c>)
 800090c:	f000 fb4a 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000910:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000922:	2307      	movs	r3, #7
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_GPIO_Init+0x168>)
 800092e:	f000 fb39 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <MX_GPIO_Init+0x160>)
 800094a:	f000 fb2b 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_GPIO_Init+0x160>)
 8000962:	f000 fb1f 	bl	8000fa4 <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400
 8000978:	48001800 	.word	0x48001800
 800097c:	48000800 	.word	0x48000800
 8000980:	48000c00 	.word	0x48000c00

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_MspInit+0x44>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x44>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6593      	str	r3, [r2, #88]	; 0x58
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x80>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12a      	bne.n	8000a54 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_UART_MspInit+0x84>)
 8000a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0x84>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_UART_MspInit+0x84>)
 8000a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_UART_MspInit+0x84>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <HAL_UART_MspInit+0x84>)
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_UART_MspInit+0x84>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000a2e:	f000 fdcb 	bl	80015c8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a32:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a44:	2308      	movs	r3, #8
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a50:	f000 faa8 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40008000 	.word	0x40008000
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48001800 	.word	0x48001800

08000a68 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a88:	d154      	bne.n	8000b34 <HAL_HCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aa2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f000 fa6f 	bl	8000fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f000 fa61 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d114      	bne.n	8000b30 <HAL_HCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6593      	str	r3, [r2, #88]	; 0x58
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000b1e:	f000 fd43 	bl	80015a8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <HAL_HCD_MspInit+0xd4>)
 8000b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b2e:	e001      	b.n	8000b34 <HAL_HCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000b30:	f000 fd3a 	bl	80015a8 <HAL_PWREx_EnableVddUSB>
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f8e0 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x50>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x16>
		heap_end = &end;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <_sbrk+0x50>)
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <_sbrk+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <_sbrk+0x50>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <_sbrk+0x50>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	466a      	mov	r2, sp
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d907      	bls.n	8000bd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bc6:	f004 f80f 	bl	8004be8 <__errno>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	230c      	movs	r3, #12
 8000bce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	e006      	b.n	8000be4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <_sbrk+0x50>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a03      	ldr	r2, [pc, #12]	; (8000bec <_sbrk+0x50>)
 8000be0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000008c 	.word	0x2000008c
 8000bf0:	20000480 	.word	0x20000480

08000bf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <SystemInit+0x64>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <SystemInit+0x64>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <SystemInit+0x68>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <SystemInit+0x68>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <SystemInit+0x68>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <SystemInit+0x68>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <SystemInit+0x68>)
 8000c20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <SystemInit+0x68>)
 8000c2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <SystemInit+0x68>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <SystemInit+0x68>)
 8000c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <SystemInit+0x68>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SystemInit+0x64>)
 8000c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	40021000 	.word	0x40021000

08000c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c66:	e003      	b.n	8000c70 <LoopCopyDataInit>

08000c68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c6e:	3104      	adds	r1, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c78:	d3f6      	bcc.n	8000c68 <CopyDataInit>
	ldr	r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c7c:	e002      	b.n	8000c84 <LoopFillZerobss>

08000c7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c80:	f842 3b04 	str.w	r3, [r2], #4

08000c84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <LoopForever+0x16>)
	cmp	r2, r3
 8000c86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c88:	d3f9      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c8a:	f7ff ffb3 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f003 ffb1 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c92:	f7ff fc8d 	bl	80005b0 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000c9c:	08005514 	.word	0x08005514
	ldr	r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ca4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000ca8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000cac:	2000047c 	.word	0x2000047c

08000cb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_IRQHandler>

08000cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f93d 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f80e 	bl	8000ce4 <HAL_InitTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	e001      	b.n	8000cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd4:	f7ff fe5e 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_InitTick+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d022      	beq.n	8000d3e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_InitTick+0x6c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_InitTick+0x68>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f93c 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10f      	bne.n	8000d38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b0f      	cmp	r3, #15
 8000d1c:	d809      	bhi.n	8000d32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	f04f 30ff 	mov.w	r0, #4294967295
 8000d26:	f000 f914 	bl	8000f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_InitTick+0x70>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e007      	b.n	8000d42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e004      	b.n	8000d42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e001      	b.n	8000d42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x1c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x20>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_IncTick+0x1c>)
 8000d68:	6013      	str	r3, [r2, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20000474 	.word	0x20000474
 8000d78:	20000008 	.word	0x20000008

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000474 	.word	0x20000474

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d004      	beq.n	8000db8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_Delay+0x40>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db8:	bf00      	nop
 8000dba:	f7ff ffdf 	bl	8000d7c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d8f7      	bhi.n	8000dba <HAL_Delay+0x26>
  {
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff47 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff5c 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffb0 	bl	8000ef8 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e166      	b.n	8001282 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8158 	beq.w	800127c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d00b      	beq.n	8000fec <HAL_GPIO_Init+0x48>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	2b11      	cmp	r3, #17
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0xea>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d123      	bne.n	80010d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	6939      	ldr	r1, [r7, #16]
 80010d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0203 	and.w	r2, r3, #3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80b2 	beq.w	800127c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001118:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <HAL_GPIO_Init+0x2fc>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111c:	4a60      	ldr	r2, [pc, #384]	; (80012a0 <HAL_GPIO_Init+0x2fc>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6613      	str	r3, [r2, #96]	; 0x60
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <HAL_GPIO_Init+0x2fc>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001130:	4a5c      	ldr	r2, [pc, #368]	; (80012a4 <HAL_GPIO_Init+0x300>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115a:	d02b      	beq.n	80011b4 <HAL_GPIO_Init+0x210>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_GPIO_Init+0x304>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d025      	beq.n	80011b0 <HAL_GPIO_Init+0x20c>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a51      	ldr	r2, [pc, #324]	; (80012ac <HAL_GPIO_Init+0x308>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d01f      	beq.n	80011ac <HAL_GPIO_Init+0x208>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a50      	ldr	r2, [pc, #320]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d019      	beq.n	80011a8 <HAL_GPIO_Init+0x204>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x310>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x200>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x314>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1fc>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x318>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1f8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x31c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1f4>
 8001194:	2307      	movs	r3, #7
 8001196:	e00e      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 8001198:	2308      	movs	r3, #8
 800119a:	e00c      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 800119c:	2306      	movs	r3, #6
 800119e:	e00a      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011a0:	2305      	movs	r3, #5
 80011a2:	e008      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011a4:	2304      	movs	r3, #4
 80011a6:	e006      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011a8:	2303      	movs	r3, #3
 80011aa:	e004      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011b4:	2300      	movs	r3, #0
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	f002 0203 	and.w	r2, r2, #3
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	4093      	lsls	r3, r2
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c6:	4937      	ldr	r1, [pc, #220]	; (80012a4 <HAL_GPIO_Init+0x300>)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_GPIO_Init+0x320>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011f8:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_GPIO_Init+0x320>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001222:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_GPIO_Init+0x320>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_GPIO_Init+0x320>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f ae91 	bne.w	8000fb4 <HAL_GPIO_Init+0x10>
  }
}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000c00 	.word	0x48000c00
 80012b4:	48001000 	.word	0x48001000
 80012b8:	48001400 	.word	0x48001400
 80012bc:	48001800 	.word	0x48001800
 80012c0:	48001c00 	.word	0x48001c00
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001340:	887a      	ldrh	r2, [r7, #2]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001346:	e002      	b.n	800134e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800135a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135c:	b08f      	sub	sp, #60	; 0x3c
 800135e:	af0a      	add	r7, sp, #40	; 0x28
 8001360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e054      	b.n	8001416 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fb6e 	bl	8000a68 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2203      	movs	r2, #3
 8001390:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 faac 	bl	8004908 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	687e      	ldr	r6, [r7, #4]
 80013b8:	466d      	mov	r5, sp
 80013ba:	f106 0410 	add.w	r4, r6, #16
 80013be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ce:	1d33      	adds	r3, r6, #4
 80013d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f003 fa46 	bl	8004864 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 faa3 	bl	800492a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	687e      	ldr	r6, [r7, #4]
 80013ec:	466d      	mov	r5, sp
 80013ee:	f106 0410 	add.w	r4, r6, #16
 80013f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001402:	1d33      	adds	r3, r6, #4
 8001404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001406:	6838      	ldr	r0, [r7, #0]
 8001408:	f003 fb36 	bl	8004a78 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001420 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001430:	d102      	bne.n	8001438 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001436:	e00b      	b.n	8001450 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_PWREx_GetVoltageRange+0x3c>)
 800143a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001446:	d102      	bne.n	800144e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144c:	e000      	b.n	8001450 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800144e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40007000 	.word	0x40007000

08001460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d141      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800146e:	4b4b      	ldr	r3, [pc, #300]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147a:	d131      	bne.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800147c:	4b47      	ldr	r3, [pc, #284]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001482:	4a46      	ldr	r2, [pc, #280]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001494:	4a41      	ldr	r2, [pc, #260]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800149c:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2232      	movs	r2, #50	; 0x32
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	0c9b      	lsrs	r3, r3, #18
 80014ae:	3301      	adds	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b2:	e002      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	d102      	bne.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f2      	bne.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014da:	d158      	bne.n	800158e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e057      	b.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e0:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e6:	4a2d      	ldr	r2, [pc, #180]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014f0:	e04d      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f8:	d141      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001506:	d131      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2232      	movs	r2, #50	; 0x32
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153e:	e002      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3b01      	subs	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d102      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f2      	bne.n	8001540 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001566:	d112      	bne.n	800158e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e011      	b.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800157c:	e007      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40007000 	.word	0x40007000
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6053      	str	r3, [r2, #4]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40007000 	.word	0x40007000

080015c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d6:	6053      	str	r3, [r2, #4]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f000 bc16 	b.w	8001e28 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fc:	4ba0      	ldr	r3, [pc, #640]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001606:	4b9e      	ldr	r3, [pc, #632]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80e4 	beq.w	80017e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <HAL_RCC_OscConfig+0x4c>
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	f040 808b 	bne.w	8001742 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b01      	cmp	r3, #1
 8001630:	f040 8087 	bne.w	8001742 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001634:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x64>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e3ed      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	4b8b      	ldr	r3, [pc, #556]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <HAL_RCC_OscConfig+0x7e>
 800165c:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001664:	e005      	b.n	8001672 <HAL_RCC_OscConfig+0x8a>
 8001666:	4b86      	ldr	r3, [pc, #536]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001672:	4293      	cmp	r3, r2
 8001674:	d223      	bcs.n	80016be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fdc8 	bl	8002210 <RCC_SetFlashLatencyFromMSIRange>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e3ce      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168a:	4b7d      	ldr	r3, [pc, #500]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7c      	ldr	r2, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b7a      	ldr	r3, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4977      	ldr	r1, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	4972      	ldr	r1, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
 80016bc:	e025      	b.n	800170a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016be:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6f      	ldr	r2, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	496a      	ldr	r1, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	4965      	ldr	r1, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fd88 	bl	8002210 <RCC_SetFlashLatencyFromMSIRange>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e38e      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800170a:	f000 fcbf 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800170e:	4601      	mov	r1, r0
 8001710:	4b5b      	ldr	r3, [pc, #364]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	4a5a      	ldr	r2, [pc, #360]	; (8001884 <HAL_RCC_OscConfig+0x29c>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	fa21 f303 	lsr.w	r3, r1, r3
 8001726:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_OscConfig+0x2a0>)
 8001728:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800172a:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x2a4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fad8 	bl	8000ce4 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d052      	beq.n	80017e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	e372      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d032      	beq.n	80017b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800174a:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001756:	f7ff fb11 	bl	8000d7c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175e:	f7ff fb0d 	bl	8000d7c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e35b      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3f      	ldr	r2, [pc, #252]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	493a      	ldr	r1, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179a:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	4935      	ldr	r1, [pc, #212]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
 80017ae:	e01a      	b.n	80017e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017b0:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a32      	ldr	r2, [pc, #200]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fade 	bl	8000d7c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c4:	f7ff fada 	bl	8000d7c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e328      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1dc>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d073      	beq.n	80018da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x21c>
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d10e      	bne.n	800181c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d063      	beq.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d15f      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e305      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x24c>
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0x288>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x270>
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x288>
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_RCC_OscConfig+0x298>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01b      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fa80 	bl	8000d7c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	e010      	b.n	80018a2 <HAL_RCC_OscConfig+0x2ba>
 8001880:	40021000 	.word	0x40021000
 8001884:	08005488 	.word	0x08005488
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fa74 	bl	8000d7c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e2c2      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	4baf      	ldr	r3, [pc, #700]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x2a8>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fa64 	bl	8000d7c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fa60 	bl	8000d7c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e2ae      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	4ba5      	ldr	r3, [pc, #660]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2d0>
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d060      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x310>
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d116      	bne.n	8001926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	4b99      	ldr	r3, [pc, #612]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x328>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e28b      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b93      	ldr	r3, [pc, #588]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	4990      	ldr	r1, [pc, #576]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001924:	e040      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d023      	beq.n	8001976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800192e:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a8b      	ldr	r2, [pc, #556]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fa1f 	bl	8000d7c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fa1b 	bl	8000d7c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e269      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b7f      	ldr	r3, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	497c      	ldr	r1, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
 8001974:	e018      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b7a      	ldr	r3, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a79      	ldr	r2, [pc, #484]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 800197c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff f9fb 	bl	8000d7c <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff f9f7 	bl	8000d7c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e245      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	4b70      	ldr	r3, [pc, #448]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c2:	4a67      	ldr	r2, [pc, #412]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f9d6 	bl	8000d7c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f9d2 	bl	8000d7c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e220      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e6:	4b5e      	ldr	r3, [pc, #376]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ef      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3ec>
 80019f4:	e01b      	b.n	8001a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f6:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff f9b9 	bl	8000d7c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f9b5 	bl	8000d7c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e203      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ef      	bne.n	8001a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80a6 	beq.w	8001b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a40:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	4a43      	ldr	r2, [pc, #268]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6593      	str	r3, [r2, #88]	; 0x58
 8001a58:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <HAL_RCC_OscConfig+0x57c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d118      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x57c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a3a      	ldr	r2, [pc, #232]	; (8001b64 <HAL_RCC_OscConfig+0x57c>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a80:	f7ff f97c 	bl	8000d7c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a88:	f7ff f978 	bl	8000d7c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1c6      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_RCC_OscConfig+0x57c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4d8>
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab4:	4a2a      	ldr	r2, [pc, #168]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abe:	e024      	b.n	8001b0a <HAL_RCC_OscConfig+0x522>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d110      	bne.n	8001aea <HAL_RCC_OscConfig+0x502>
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4a20      	ldr	r2, [pc, #128]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae8:	e00f      	b.n	8001b0a <HAL_RCC_OscConfig+0x522>
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d016      	beq.n	8001b40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff f933 	bl	8000d7c <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff f92f 	bl	8000d7c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e17b      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_OscConfig+0x578>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0ed      	beq.n	8001b1a <HAL_RCC_OscConfig+0x532>
 8001b3e:	e01a      	b.n	8001b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f91c 	bl	8000d7c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b46:	e00f      	b.n	8001b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f918 	bl	8000d7c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d906      	bls.n	8001b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e164      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b68:	4ba8      	ldr	r3, [pc, #672]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1e8      	bne.n	8001b48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4ba3      	ldr	r3, [pc, #652]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	4aa2      	ldr	r2, [pc, #648]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d03c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b9c:	4b9b      	ldr	r3, [pc, #620]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba2:	4a9a      	ldr	r2, [pc, #616]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f8e6 	bl	8000d7c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb4:	f7ff f8e2 	bl	8000d7c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e130      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bc6:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ef      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x5cc>
 8001bd4:	e01b      	b.n	8001c0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bd6:	4b8d      	ldr	r3, [pc, #564]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bdc:	4a8b      	ldr	r2, [pc, #556]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff f8c9 	bl	8000d7c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bee:	f7ff f8c5 	bl	8000d7c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e113      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c00:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ef      	bne.n	8001bee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8107 	beq.w	8001e26 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	f040 80cb 	bne.w	8001db8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c22:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0203 	and.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d12c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	3b01      	subs	r3, #1
 8001c42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d123      	bne.n	8001c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d11b      	bne.n	8001c90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d113      	bne.n	8001c90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d109      	bne.n	8001c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	085b      	lsrs	r3, r3, #1
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d06d      	beq.n	8001d6c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d068      	beq.n	8001d68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ca2:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0ba      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b56      	ldr	r3, [pc, #344]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cbe:	f7ff f85d 	bl	8000d7c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7ff f859 	bl	8000d7c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0a7      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce4:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x828>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	4311      	orrs	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cfe:	0212      	lsls	r2, r2, #8
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d06:	0852      	lsrs	r2, r2, #1
 8001d08:	3a01      	subs	r2, #1
 8001d0a:	0552      	lsls	r2, r2, #21
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d12:	0852      	lsrs	r2, r2, #1
 8001d14:	3a01      	subs	r2, #1
 8001d16:	0652      	lsls	r2, r2, #25
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d1e:	06d2      	lsls	r2, r2, #27
 8001d20:	430a      	orrs	r2, r1
 8001d22:	493a      	ldr	r1, [pc, #232]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d40:	f7ff f81c 	bl	8000d7c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff f818 	bl	8000d7c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e066      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d66:	e05e      	b.n	8001e26 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e05d      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d156      	bne.n	8001e26 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d90:	f7fe fff4 	bl	8000d7c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe fff0 	bl	8000d7c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e03e      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x7b0>
 8001db6:	e036      	b.n	8001e26 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d031      	beq.n	8001e22 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001ddc:	f023 0303 	bic.w	r3, r3, #3
 8001de0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x824>)
 8001de8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7fe ffc3 	bl	8000d7c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df8:	e00c      	b.n	8001e14 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe ffbf 	bl	8000d7c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d905      	bls.n	8001e14 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e00d      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_RCC_OscConfig+0x848>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ec      	bne.n	8001dfa <HAL_RCC_OscConfig+0x812>
 8001e20:	e001      	b.n	8001e26 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e10f      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b89      	ldr	r3, [pc, #548]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d910      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b86      	ldr	r3, [pc, #536]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 020f 	bic.w	r2, r3, #15
 8001e62:	4984      	ldr	r1, [pc, #528]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b82      	ldr	r3, [pc, #520]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0f7      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8089 	beq.w	8001f9c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d133      	bne.n	8001efa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b79      	ldr	r3, [pc, #484]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0e4      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ea2:	f000 fa0f 	bl	80022c4 <RCC_GetSysClockFreqFromPLLSource>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b74      	ldr	r3, [pc, #464]	; (800207c <HAL_RCC_ClockConfig+0x248>)
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d955      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001eae:	4b72      	ldr	r3, [pc, #456]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec2:	4a6d      	ldr	r2, [pc, #436]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e044      	b.n	8001f5a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03e      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x126>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d13a      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ee4:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eec:	4a62      	ldr	r2, [pc, #392]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e02f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0ac      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1a:	4b57      	ldr	r3, [pc, #348]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0a0      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2a:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e098      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f3a:	f000 f8a7 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_RCC_ClockConfig+0x248>)
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d909      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f46:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f4e:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4944      	ldr	r1, [pc, #272]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f6c:	f7fe ff06 	bl	8000d7c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe ff02 	bl	8000d7c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e070      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4930      	ldr	r1, [pc, #192]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
 8001fba:	e008      	b.n	8001fce <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b80      	cmp	r3, #128	; 0x80
 8001fc0:	d105      	bne.n	8001fce <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a2c      	ldr	r2, [pc, #176]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fcc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d210      	bcs.n	8001ffe <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 020f 	bic.w	r2, r3, #15
 8001fe4:	4923      	ldr	r1, [pc, #140]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCC_ClockConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e036      	b.n	800206c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	4918      	ldr	r1, [pc, #96]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4910      	ldr	r1, [pc, #64]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800203c:	f000 f826 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002040:	4601      	mov	r1, r0
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_RCC_ClockConfig+0x244>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_RCC_ClockConfig+0x24c>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	fa21 f303 	lsr.w	r3, r1, r3
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x250>)
 800205a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_RCC_ClockConfig+0x254>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fe3f 	bl	8000ce4 <HAL_InitTick>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]

  return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40022000 	.word	0x40022000
 8002078:	40021000 	.word	0x40021000
 800207c:	04c4b400 	.word	0x04c4b400
 8002080:	08005488 	.word	0x08005488
 8002084:	20000000 	.word	0x20000000
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209a:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x34>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d121      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d11e      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020c0:	4b33      	ldr	r3, [pc, #204]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020cc:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e005      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020e8:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d102      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e004      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b08      	cmp	r3, #8
 800210e:	d101      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_RCC_GetSysClockFreq+0x110>)
 8002112:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d133      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d002      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0xa4>
 800212a:	2b03      	cmp	r3, #3
 800212c:	d003      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0xaa>
 800212e:	e005      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002132:	617b      	str	r3, [r7, #20]
      break;
 8002134:	e005      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_GetSysClockFreq+0x110>)
 8002138:	617b      	str	r3, [r7, #20]
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	617b      	str	r3, [r7, #20]
      break;
 8002140:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	3301      	adds	r3, #1
 800214e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	fb02 f203 	mul.w	r2, r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_GetSysClockFreq+0x104>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0e5b      	lsrs	r3, r3, #25
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002182:	69bb      	ldr	r3, [r7, #24]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3724      	adds	r7, #36	; 0x24
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000
 8002194:	080054a0 	.word	0x080054a0
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200

080021a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4601      	mov	r1, r0
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08005498 	.word	0x08005498

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021e8:	f7ff ffda 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021ec:	4601      	mov	r1, r0
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0adb      	lsrs	r3, r3, #11
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_RCC_GetPCLK2Freq+0x28>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08005498 	.word	0x08005498

08002210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002228:	f7ff f8fa 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 800222c:	6178      	str	r0, [r7, #20]
 800222e:	e014      	b.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b22      	ldr	r3, [pc, #136]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	4a21      	ldr	r2, [pc, #132]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6593      	str	r3, [r2, #88]	; 0x58
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002248:	f7ff f8ea 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 800224c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	d10b      	bne.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d913      	bls.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2ba0      	cmp	r3, #160	; 0xa0
 800226c:	d902      	bls.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226e:	2302      	movs	r3, #2
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e00d      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002274:	2301      	movs	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e00a      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b7f      	cmp	r3, #127	; 0x7f
 800227e:	d902      	bls.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002280:	2302      	movs	r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e004      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b70      	cmp	r3, #112	; 0x70
 800228a:	d101      	bne.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800228c:	2301      	movs	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 020f 	bic.w	r2, r3, #15
 8002298:	4909      	ldr	r1, [pc, #36]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40022000 	.word	0x40022000

080022c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d118      	bne.n	800230c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d107      	bne.n	80022f6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022e6:	4b27      	ldr	r3, [pc, #156]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e005      	b.n	8002302 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002302:	4a21      	ldr	r2, [pc, #132]	; (8002388 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d002      	beq.n	8002322 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002320:	e005      	b.n	800232e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002324:	613b      	str	r3, [r7, #16]
    break;
 8002326:	e005      	b.n	8002334 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800232a:	613b      	str	r3, [r7, #16]
    break;
 800232c:	e002      	b.n	8002334 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	613b      	str	r3, [r7, #16]
    break;
 8002332:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	fb02 f203 	mul.w	r2, r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0e5b      	lsrs	r3, r3, #25
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	3301      	adds	r3, #1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002374:	683b      	ldr	r3, [r7, #0]
}
 8002376:	4618      	mov	r0, r3
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	080054a0 	.word	0x080054a0
 800238c:	00f42400 	.word	0x00f42400
 8002390:	007a1200 	.word	0x007a1200

08002394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800239c:	2300      	movs	r3, #0
 800239e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a0:	2300      	movs	r3, #0
 80023a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d03d      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d00b      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80023b8:	2b40      	cmp	r3, #64	; 0x40
 80023ba:	d804      	bhi.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d015      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80023c4:	e01d      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80023c6:	2b60      	cmp	r3, #96	; 0x60
 80023c8:	d01e      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023ca:	2b80      	cmp	r3, #128	; 0x80
 80023cc:	d01c      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023ce:	e018      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023d0:	4b86      	ldr	r3, [pc, #536]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a85      	ldr	r2, [pc, #532]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023dc:	e015      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fafd 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ee:	e00c      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3320      	adds	r3, #32
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fbe4 	bl	8002bc4 <RCCEx_PLLSAI2_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002400:	e003      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	74fb      	strb	r3, [r7, #19]
      break;
 8002406:	e000      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002416:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241e:	4973      	ldr	r1, [pc, #460]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002426:	e001      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d042      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002440:	d00f      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002446:	d805      	bhi.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d011      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800244c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002450:	d017      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002452:	e01f      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002458:	d01f      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245e:	d01c      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002460:	e018      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002462:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a61      	ldr	r2, [pc, #388]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246e:	e015      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fab4 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002480:	e00c      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3320      	adds	r3, #32
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fb9b 	bl	8002bc4 <RCCEx_PLLSAI2_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002492:	e003      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	74fb      	strb	r3, [r7, #19]
      break;
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800249a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024a2:	4b52      	ldr	r3, [pc, #328]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	494e      	ldr	r1, [pc, #312]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80024b8:	e001      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 809f 	beq.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	4a40      	ldr	r2, [pc, #256]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6593      	str	r3, [r2, #88]	; 0x58
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a3a      	ldr	r2, [pc, #232]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800250e:	f7fe fc35 	bl	8000d7c <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002514:	e009      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7fe fc31 	bl	8000d7c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d902      	bls.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	74fb      	strb	r3, [r7, #19]
        break;
 8002528:	e005      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ef      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d15b      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01f      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d019      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d016      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fbf0 	bl	8000d7c <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	e00b      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7fe fbec 	bl	8000d7c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	74fb      	strb	r3, [r7, #19]
            break;
 80025b6:	e006      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ec      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025e4:	e008      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
 80025ea:	e005      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f8:	7c7b      	ldrb	r3, [r7, #17]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4ba0      	ldr	r3, [pc, #640]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a9f      	ldr	r2, [pc, #636]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002616:	4b9a      	ldr	r3, [pc, #616]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 0203 	bic.w	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	4996      	ldr	r1, [pc, #600]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002638:	4b91      	ldr	r3, [pc, #580]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 020c 	bic.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	498e      	ldr	r1, [pc, #568]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	4985      	ldr	r1, [pc, #532]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800267c:	4b80      	ldr	r3, [pc, #512]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268a:	497d      	ldr	r1, [pc, #500]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800269e:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	4974      	ldr	r1, [pc, #464]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c0:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ce:	496c      	ldr	r1, [pc, #432]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f0:	4963      	ldr	r1, [pc, #396]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002704:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002712:	495b      	ldr	r1, [pc, #364]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002726:	4b56      	ldr	r3, [pc, #344]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	4952      	ldr	r1, [pc, #328]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002748:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	494a      	ldr	r1, [pc, #296]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276a:	4b45      	ldr	r3, [pc, #276]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	4941      	ldr	r1, [pc, #260]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	4939      	ldr	r1, [pc, #228]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d028      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027bc:	4930      	ldr	r1, [pc, #192]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027cc:	d106      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ce:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d8:	60d3      	str	r3, [r2, #12]
 80027da:	e011      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f8f9 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d04d      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002814:	d108      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002822:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002826:	e012      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800282e:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002834:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002846:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002856:	d106      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002862:	60d3      	str	r3, [r2, #12]
 8002864:	e020      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800286e:	d109      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a02      	ldr	r2, [pc, #8]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	60d3      	str	r3, [r2, #12]
 800287c:	e014      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	2101      	movs	r1, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f8a5 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d028      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b4:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	4947      	ldr	r1, [pc, #284]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d2:	d106      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
 80028e0:	e011      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ea:	d10c      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f876 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002922:	492f      	ldr	r1, [pc, #188]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f851 	bl	80029e4 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800295c:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800295e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002962:	f023 0204 	bic.w	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296c:	491c      	ldr	r1, [pc, #112]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002986:	f023 0218 	bic.w	r2, r3, #24
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	4913      	ldr	r1, [pc, #76]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b4:	490a      	ldr	r1, [pc, #40]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029f2:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00e      	beq.n	8002a1c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029fe:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0203 	and.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d103      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
       ||
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d13f      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	e03c      	b.n	8002a96 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d00c      	beq.n	8002a3e <RCCEx_PLLSAI1_Config+0x5a>
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d013      	beq.n	8002a50 <RCCEx_PLLSAI1_Config+0x6c>
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d120      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a2c:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e01a      	b.n	8002a74 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4e:	e013      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a50:	4b58      	ldr	r3, [pc, #352]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10f      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a6c:	e006      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      break;
 8002a72:	e004      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002a74:	bf00      	nop
 8002a76:	e002      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002a7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d108      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002a84:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f023 0203 	bic.w	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4948      	ldr	r1, [pc, #288]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 8086 	bne.w	8002baa <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a9e:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a44      	ldr	r2, [pc, #272]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002aa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aaa:	f7fe f967 	bl	8000d7c <HAL_GetTick>
 8002aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ab0:	e009      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab2:	f7fe f963 	bl	8000d7c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d902      	bls.n	8002ac6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ac4:	e005      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ef      	bne.n	8002ab2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d168      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d113      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	4b35      	ldr	r3, [pc, #212]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1d4>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6892      	ldr	r2, [r2, #8]
 8002aea:	0211      	lsls	r1, r2, #8
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68d2      	ldr	r2, [r2, #12]
 8002af0:	06d2      	lsls	r2, r2, #27
 8002af2:	4311      	orrs	r1, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6852      	ldr	r2, [r2, #4]
 8002af8:	3a01      	subs	r2, #1
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	430a      	orrs	r2, r1
 8002afe:	492d      	ldr	r1, [pc, #180]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	610b      	str	r3, [r1, #16]
 8002b04:	e02d      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d115      	bne.n	8002b38 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6892      	ldr	r2, [r2, #8]
 8002b18:	0211      	lsls	r1, r2, #8
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6912      	ldr	r2, [r2, #16]
 8002b1e:	0852      	lsrs	r2, r2, #1
 8002b20:	3a01      	subs	r2, #1
 8002b22:	0552      	lsls	r2, r2, #21
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6852      	ldr	r2, [r2, #4]
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	4920      	ldr	r1, [pc, #128]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	610b      	str	r3, [r1, #16]
 8002b36:	e014      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6892      	ldr	r2, [r2, #8]
 8002b44:	0211      	lsls	r1, r2, #8
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6952      	ldr	r2, [r2, #20]
 8002b4a:	0852      	lsrs	r2, r2, #1
 8002b4c:	3a01      	subs	r2, #1
 8002b4e:	0652      	lsls	r2, r2, #25
 8002b50:	4311      	orrs	r1, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6852      	ldr	r2, [r2, #4]
 8002b56:	3a01      	subs	r2, #1
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	4915      	ldr	r1, [pc, #84]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f905 	bl	8000d7c <HAL_GetTick>
 8002b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b74:	e009      	b.n	8002b8a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b76:	f7fe f901 	bl	8000d7c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d902      	bls.n	8002b8a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	73fb      	strb	r3, [r7, #15]
          break;
 8002b88:	e005      	b.n	8002b96 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ef      	beq.n	8002b76 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	07ff800f 	.word	0x07ff800f
 8002bbc:	ff9f800f 	.word	0xff9f800f
 8002bc0:	f9ff800f 	.word	0xf9ff800f

08002bc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd2:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bde:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d103      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13f      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e03c      	b.n	8002c76 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d00c      	beq.n	8002c1e <RCCEx_PLLSAI2_Config+0x5a>
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d013      	beq.n	8002c30 <RCCEx_PLLSAI2_Config+0x6c>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d120      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c0c:	4b61      	ldr	r3, [pc, #388]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11d      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e01a      	b.n	8002c54 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2e:	e013      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c30:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10f      	bne.n	8002c5c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c3c:	4b55      	ldr	r3, [pc, #340]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c4c:	e006      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      break;
 8002c52:	e004      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002c54:	bf00      	nop
 8002c56:	e002      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002c5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d108      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002c64:	4b4b      	ldr	r3, [pc, #300]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 0203 	bic.w	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4948      	ldr	r1, [pc, #288]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 8086 	bne.w	8002d8a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c7e:	4b45      	ldr	r3, [pc, #276]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a44      	ldr	r2, [pc, #272]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f877 	bl	8000d7c <HAL_GetTick>
 8002c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c90:	e009      	b.n	8002ca6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c92:	f7fe f873 	bl	8000d7c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ca4:	e005      	b.n	8002cb2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d168      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d113      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cbe:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	4b35      	ldr	r3, [pc, #212]	; (8002d98 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6892      	ldr	r2, [r2, #8]
 8002cca:	0211      	lsls	r1, r2, #8
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68d2      	ldr	r2, [r2, #12]
 8002cd0:	06d2      	lsls	r2, r2, #27
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6852      	ldr	r2, [r2, #4]
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	492d      	ldr	r1, [pc, #180]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	614b      	str	r3, [r1, #20]
 8002ce4:	e02d      	b.n	8002d42 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d115      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cec:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6912      	ldr	r2, [r2, #16]
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0552      	lsls	r2, r2, #21
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6852      	ldr	r2, [r2, #4]
 8002d0a:	3a01      	subs	r2, #1
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	4920      	ldr	r1, [pc, #128]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	614b      	str	r3, [r1, #20]
 8002d16:	e014      	b.n	8002d42 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	0211      	lsls	r1, r2, #8
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6952      	ldr	r2, [r2, #20]
 8002d2a:	0852      	lsrs	r2, r2, #1
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0652      	lsls	r2, r2, #25
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6852      	ldr	r2, [r2, #4]
 8002d36:	3a01      	subs	r2, #1
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	4915      	ldr	r1, [pc, #84]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe f815 	bl	8000d7c <HAL_GetTick>
 8002d52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d54:	e009      	b.n	8002d6a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d56:	f7fe f811 	bl	8000d7c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d902      	bls.n	8002d6a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	73fb      	strb	r3, [r7, #15]
          break;
 8002d68:	e005      	b.n	8002d76 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0ef      	beq.n	8002d56 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4903      	ldr	r1, [pc, #12]	; (8002d94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	07ff800f 	.word	0x07ff800f
 8002d9c:	ff9f800f 	.word	0xff9f800f
 8002da0:	f9ff800f 	.word	0xf9ff800f

08002da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e042      	b.n	8002e3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd fe07 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2224      	movs	r2, #36	; 0x24
 8002dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8c6 	bl	8002f78 <UART_SetConfig>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e022      	b.n	8002e3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 faa8 	bl	8004354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f001 fb2f 	bl	8004498 <UART_CheckIdleState>
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	f040 8084 	bne.w	8002f68 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_UART_Transmit+0x28>
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e07c      	b.n	8002f6a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Transmit+0x3a>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e075      	b.n	8002f6a <HAL_UART_Transmit+0x126>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2221      	movs	r2, #33	; 0x21
 8002e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e96:	f7fd ff71 	bl	8000d7c <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_UART_Transmit+0x84>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d104      	bne.n	8002ec8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e003      	b.n	8002ed0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8002ed8:	e02d      	b.n	8002f36 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f001 fb1f 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e03a      	b.n	8002f6a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f06:	b292      	uxth	r2, r2
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	e008      	b.n	8002f24 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1cb      	bne.n	8002eda <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f001 faeb 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e006      	b.n	8002f6a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	0000      	movs	r0, r0
 8002f74:	0000      	movs	r0, r0
	...

08002f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002f7c:	b08a      	sub	sp, #40	; 0x28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	4313      	orrs	r3, r2
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4baa      	ldr	r3, [pc, #680]	; (8003260 <UART_SetConfig+0x2e8>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a9f      	ldr	r2, [pc, #636]	; (8003264 <UART_SetConfig+0x2ec>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ffe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003008:	430b      	orrs	r3, r1
 800300a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	f023 010f 	bic.w	r1, r3, #15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a90      	ldr	r2, [pc, #576]	; (8003268 <UART_SetConfig+0x2f0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d126      	bne.n	800307a <UART_SetConfig+0x102>
 800302c:	4b8f      	ldr	r3, [pc, #572]	; (800326c <UART_SetConfig+0x2f4>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b03      	cmp	r3, #3
 8003038:	d81a      	bhi.n	8003070 <UART_SetConfig+0xf8>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <UART_SetConfig+0xc8>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003051 	.word	0x08003051
 8003044:	08003061 	.word	0x08003061
 8003048:	08003059 	.word	0x08003059
 800304c:	08003069 	.word	0x08003069
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003056:	e116      	b.n	8003286 <UART_SetConfig+0x30e>
 8003058:	2302      	movs	r3, #2
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305e:	e112      	b.n	8003286 <UART_SetConfig+0x30e>
 8003060:	2304      	movs	r3, #4
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e10e      	b.n	8003286 <UART_SetConfig+0x30e>
 8003068:	2308      	movs	r3, #8
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e10a      	b.n	8003286 <UART_SetConfig+0x30e>
 8003070:	2310      	movs	r3, #16
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	bf00      	nop
 8003078:	e105      	b.n	8003286 <UART_SetConfig+0x30e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7c      	ldr	r2, [pc, #496]	; (8003270 <UART_SetConfig+0x2f8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d138      	bne.n	80030f6 <UART_SetConfig+0x17e>
 8003084:	4b79      	ldr	r3, [pc, #484]	; (800326c <UART_SetConfig+0x2f4>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d82c      	bhi.n	80030ec <UART_SetConfig+0x174>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x120>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	080030ed 	.word	0x080030ed
 80030a4:	080030ed 	.word	0x080030ed
 80030a8:	080030dd 	.word	0x080030dd
 80030ac:	080030ed 	.word	0x080030ed
 80030b0:	080030ed 	.word	0x080030ed
 80030b4:	080030ed 	.word	0x080030ed
 80030b8:	080030d5 	.word	0x080030d5
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	080030ed 	.word	0x080030ed
 80030c4:	080030ed 	.word	0x080030ed
 80030c8:	080030e5 	.word	0x080030e5
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e0d8      	b.n	8003286 <UART_SetConfig+0x30e>
 80030d4:	2302      	movs	r3, #2
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e0d4      	b.n	8003286 <UART_SetConfig+0x30e>
 80030dc:	2304      	movs	r3, #4
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e0d0      	b.n	8003286 <UART_SetConfig+0x30e>
 80030e4:	2308      	movs	r3, #8
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ea:	e0cc      	b.n	8003286 <UART_SetConfig+0x30e>
 80030ec:	2310      	movs	r3, #16
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	bf00      	nop
 80030f4:	e0c7      	b.n	8003286 <UART_SetConfig+0x30e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <UART_SetConfig+0x2fc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d125      	bne.n	800314c <UART_SetConfig+0x1d4>
 8003100:	4b5a      	ldr	r3, [pc, #360]	; (800326c <UART_SetConfig+0x2f4>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800310a:	2b10      	cmp	r3, #16
 800310c:	d011      	beq.n	8003132 <UART_SetConfig+0x1ba>
 800310e:	2b10      	cmp	r3, #16
 8003110:	d802      	bhi.n	8003118 <UART_SetConfig+0x1a0>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <UART_SetConfig+0x1aa>
 8003116:	e014      	b.n	8003142 <UART_SetConfig+0x1ca>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d006      	beq.n	800312a <UART_SetConfig+0x1b2>
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d00c      	beq.n	800313a <UART_SetConfig+0x1c2>
 8003120:	e00f      	b.n	8003142 <UART_SetConfig+0x1ca>
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003128:	e0ad      	b.n	8003286 <UART_SetConfig+0x30e>
 800312a:	2302      	movs	r3, #2
 800312c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003130:	e0a9      	b.n	8003286 <UART_SetConfig+0x30e>
 8003132:	2304      	movs	r3, #4
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003138:	e0a5      	b.n	8003286 <UART_SetConfig+0x30e>
 800313a:	2308      	movs	r3, #8
 800313c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003140:	e0a1      	b.n	8003286 <UART_SetConfig+0x30e>
 8003142:	2310      	movs	r3, #16
 8003144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003148:	bf00      	nop
 800314a:	e09c      	b.n	8003286 <UART_SetConfig+0x30e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a49      	ldr	r2, [pc, #292]	; (8003278 <UART_SetConfig+0x300>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d125      	bne.n	80031a2 <UART_SetConfig+0x22a>
 8003156:	4b45      	ldr	r3, [pc, #276]	; (800326c <UART_SetConfig+0x2f4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d011      	beq.n	8003188 <UART_SetConfig+0x210>
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d802      	bhi.n	800316e <UART_SetConfig+0x1f6>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <UART_SetConfig+0x200>
 800316c:	e014      	b.n	8003198 <UART_SetConfig+0x220>
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d006      	beq.n	8003180 <UART_SetConfig+0x208>
 8003172:	2bc0      	cmp	r3, #192	; 0xc0
 8003174:	d00c      	beq.n	8003190 <UART_SetConfig+0x218>
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x220>
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e082      	b.n	8003286 <UART_SetConfig+0x30e>
 8003180:	2302      	movs	r3, #2
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e07e      	b.n	8003286 <UART_SetConfig+0x30e>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e07a      	b.n	8003286 <UART_SetConfig+0x30e>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e076      	b.n	8003286 <UART_SetConfig+0x30e>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	bf00      	nop
 80031a0:	e071      	b.n	8003286 <UART_SetConfig+0x30e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a35      	ldr	r2, [pc, #212]	; (800327c <UART_SetConfig+0x304>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d129      	bne.n	8003200 <UART_SetConfig+0x288>
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <UART_SetConfig+0x2f4>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ba:	d014      	beq.n	80031e6 <UART_SetConfig+0x26e>
 80031bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c0:	d802      	bhi.n	80031c8 <UART_SetConfig+0x250>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <UART_SetConfig+0x25e>
 80031c6:	e016      	b.n	80031f6 <UART_SetConfig+0x27e>
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031cc:	d007      	beq.n	80031de <UART_SetConfig+0x266>
 80031ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d2:	d00c      	beq.n	80031ee <UART_SetConfig+0x276>
 80031d4:	e00f      	b.n	80031f6 <UART_SetConfig+0x27e>
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031dc:	e053      	b.n	8003286 <UART_SetConfig+0x30e>
 80031de:	2302      	movs	r3, #2
 80031e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e4:	e04f      	b.n	8003286 <UART_SetConfig+0x30e>
 80031e6:	2304      	movs	r3, #4
 80031e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ec:	e04b      	b.n	8003286 <UART_SetConfig+0x30e>
 80031ee:	2308      	movs	r3, #8
 80031f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f4:	e047      	b.n	8003286 <UART_SetConfig+0x30e>
 80031f6:	2310      	movs	r3, #16
 80031f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fc:	bf00      	nop
 80031fe:	e042      	b.n	8003286 <UART_SetConfig+0x30e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a17      	ldr	r2, [pc, #92]	; (8003264 <UART_SetConfig+0x2ec>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d13a      	bne.n	8003280 <UART_SetConfig+0x308>
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <UART_SetConfig+0x2f4>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003218:	d014      	beq.n	8003244 <UART_SetConfig+0x2cc>
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d802      	bhi.n	8003226 <UART_SetConfig+0x2ae>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <UART_SetConfig+0x2bc>
 8003224:	e016      	b.n	8003254 <UART_SetConfig+0x2dc>
 8003226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322a:	d007      	beq.n	800323c <UART_SetConfig+0x2c4>
 800322c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003230:	d00c      	beq.n	800324c <UART_SetConfig+0x2d4>
 8003232:	e00f      	b.n	8003254 <UART_SetConfig+0x2dc>
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e024      	b.n	8003286 <UART_SetConfig+0x30e>
 800323c:	2302      	movs	r3, #2
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e020      	b.n	8003286 <UART_SetConfig+0x30e>
 8003244:	2304      	movs	r3, #4
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e01c      	b.n	8003286 <UART_SetConfig+0x30e>
 800324c:	2308      	movs	r3, #8
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003252:	e018      	b.n	8003286 <UART_SetConfig+0x30e>
 8003254:	2310      	movs	r3, #16
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325a:	bf00      	nop
 800325c:	e013      	b.n	8003286 <UART_SetConfig+0x30e>
 800325e:	bf00      	nop
 8003260:	cfff69f3 	.word	0xcfff69f3
 8003264:	40008000 	.word	0x40008000
 8003268:	40013800 	.word	0x40013800
 800326c:	40021000 	.word	0x40021000
 8003270:	40004400 	.word	0x40004400
 8003274:	40004800 	.word	0x40004800
 8003278:	40004c00 	.word	0x40004c00
 800327c:	40005000 	.word	0x40005000
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a86      	ldr	r2, [pc, #536]	; (80034a4 <UART_SetConfig+0x52c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	f040 8422 	bne.w	8003ad6 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003296:	2b08      	cmp	r3, #8
 8003298:	f200 8173 	bhi.w	8003582 <UART_SetConfig+0x60a>
 800329c:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x32c>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	08003583 	.word	0x08003583
 80032ac:	0800336b 	.word	0x0800336b
 80032b0:	08003583 	.word	0x08003583
 80032b4:	08003403 	.word	0x08003403
 80032b8:	08003583 	.word	0x08003583
 80032bc:	08003583 	.word	0x08003583
 80032c0:	08003583 	.word	0x08003583
 80032c4:	080034d5 	.word	0x080034d5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80032c8:	f7fe ff76 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d044      	beq.n	8003360 <UART_SetConfig+0x3e8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d03e      	beq.n	800335c <UART_SetConfig+0x3e4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d038      	beq.n	8003358 <UART_SetConfig+0x3e0>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d032      	beq.n	8003354 <UART_SetConfig+0x3dc>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d02c      	beq.n	8003350 <UART_SetConfig+0x3d8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d026      	beq.n	800334c <UART_SetConfig+0x3d4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b06      	cmp	r3, #6
 8003304:	d020      	beq.n	8003348 <UART_SetConfig+0x3d0>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b07      	cmp	r3, #7
 800330c:	d01a      	beq.n	8003344 <UART_SetConfig+0x3cc>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b08      	cmp	r3, #8
 8003314:	d014      	beq.n	8003340 <UART_SetConfig+0x3c8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2b09      	cmp	r3, #9
 800331c:	d00e      	beq.n	800333c <UART_SetConfig+0x3c4>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	2b0a      	cmp	r3, #10
 8003324:	d008      	beq.n	8003338 <UART_SetConfig+0x3c0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b0b      	cmp	r3, #11
 800332c:	d102      	bne.n	8003334 <UART_SetConfig+0x3bc>
 800332e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003332:	e016      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003334:	2301      	movs	r3, #1
 8003336:	e014      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	e012      	b.n	8003362 <UART_SetConfig+0x3ea>
 800333c:	2340      	movs	r3, #64	; 0x40
 800333e:	e010      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003340:	2320      	movs	r3, #32
 8003342:	e00e      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003344:	2310      	movs	r3, #16
 8003346:	e00c      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003348:	230c      	movs	r3, #12
 800334a:	e00a      	b.n	8003362 <UART_SetConfig+0x3ea>
 800334c:	230a      	movs	r3, #10
 800334e:	e008      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003350:	2308      	movs	r3, #8
 8003352:	e006      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003354:	2306      	movs	r3, #6
 8003356:	e004      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003358:	2304      	movs	r3, #4
 800335a:	e002      	b.n	8003362 <UART_SetConfig+0x3ea>
 800335c:	2302      	movs	r3, #2
 800335e:	e000      	b.n	8003362 <UART_SetConfig+0x3ea>
 8003360:	2301      	movs	r3, #1
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8003368:	e10e      	b.n	8003588 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d044      	beq.n	80033fc <UART_SetConfig+0x484>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b01      	cmp	r3, #1
 8003378:	d03e      	beq.n	80033f8 <UART_SetConfig+0x480>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b02      	cmp	r3, #2
 8003380:	d038      	beq.n	80033f4 <UART_SetConfig+0x47c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2b03      	cmp	r3, #3
 8003388:	d032      	beq.n	80033f0 <UART_SetConfig+0x478>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b04      	cmp	r3, #4
 8003390:	d02c      	beq.n	80033ec <UART_SetConfig+0x474>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b05      	cmp	r3, #5
 8003398:	d026      	beq.n	80033e8 <UART_SetConfig+0x470>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d020      	beq.n	80033e4 <UART_SetConfig+0x46c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b07      	cmp	r3, #7
 80033a8:	d01a      	beq.n	80033e0 <UART_SetConfig+0x468>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d014      	beq.n	80033dc <UART_SetConfig+0x464>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	d00e      	beq.n	80033d8 <UART_SetConfig+0x460>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b0a      	cmp	r3, #10
 80033c0:	d008      	beq.n	80033d4 <UART_SetConfig+0x45c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2b0b      	cmp	r3, #11
 80033c8:	d102      	bne.n	80033d0 <UART_SetConfig+0x458>
 80033ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80033ce:	e016      	b.n	80033fe <UART_SetConfig+0x486>
 80033d0:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <UART_SetConfig+0x530>)
 80033d2:	e014      	b.n	80033fe <UART_SetConfig+0x486>
 80033d4:	4b35      	ldr	r3, [pc, #212]	; (80034ac <UART_SetConfig+0x534>)
 80033d6:	e012      	b.n	80033fe <UART_SetConfig+0x486>
 80033d8:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <UART_SetConfig+0x538>)
 80033da:	e010      	b.n	80033fe <UART_SetConfig+0x486>
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <UART_SetConfig+0x53c>)
 80033de:	e00e      	b.n	80033fe <UART_SetConfig+0x486>
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <UART_SetConfig+0x540>)
 80033e2:	e00c      	b.n	80033fe <UART_SetConfig+0x486>
 80033e4:	4b35      	ldr	r3, [pc, #212]	; (80034bc <UART_SetConfig+0x544>)
 80033e6:	e00a      	b.n	80033fe <UART_SetConfig+0x486>
 80033e8:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <UART_SetConfig+0x548>)
 80033ea:	e008      	b.n	80033fe <UART_SetConfig+0x486>
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <UART_SetConfig+0x54c>)
 80033ee:	e006      	b.n	80033fe <UART_SetConfig+0x486>
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <UART_SetConfig+0x550>)
 80033f2:	e004      	b.n	80033fe <UART_SetConfig+0x486>
 80033f4:	4b35      	ldr	r3, [pc, #212]	; (80034cc <UART_SetConfig+0x554>)
 80033f6:	e002      	b.n	80033fe <UART_SetConfig+0x486>
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <UART_SetConfig+0x558>)
 80033fa:	e000      	b.n	80033fe <UART_SetConfig+0x486>
 80033fc:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <UART_SetConfig+0x530>)
 80033fe:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8003400:	e0c2      	b.n	8003588 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003402:	f7fe fe43 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d044      	beq.n	800349a <UART_SetConfig+0x522>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b01      	cmp	r3, #1
 8003416:	d03e      	beq.n	8003496 <UART_SetConfig+0x51e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2b02      	cmp	r3, #2
 800341e:	d038      	beq.n	8003492 <UART_SetConfig+0x51a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	2b03      	cmp	r3, #3
 8003426:	d032      	beq.n	800348e <UART_SetConfig+0x516>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b04      	cmp	r3, #4
 800342e:	d02c      	beq.n	800348a <UART_SetConfig+0x512>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2b05      	cmp	r3, #5
 8003436:	d026      	beq.n	8003486 <UART_SetConfig+0x50e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b06      	cmp	r3, #6
 800343e:	d020      	beq.n	8003482 <UART_SetConfig+0x50a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b07      	cmp	r3, #7
 8003446:	d01a      	beq.n	800347e <UART_SetConfig+0x506>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b08      	cmp	r3, #8
 800344e:	d014      	beq.n	800347a <UART_SetConfig+0x502>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2b09      	cmp	r3, #9
 8003456:	d00e      	beq.n	8003476 <UART_SetConfig+0x4fe>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b0a      	cmp	r3, #10
 800345e:	d008      	beq.n	8003472 <UART_SetConfig+0x4fa>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2b0b      	cmp	r3, #11
 8003466:	d102      	bne.n	800346e <UART_SetConfig+0x4f6>
 8003468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800346c:	e016      	b.n	800349c <UART_SetConfig+0x524>
 800346e:	2301      	movs	r3, #1
 8003470:	e014      	b.n	800349c <UART_SetConfig+0x524>
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	e012      	b.n	800349c <UART_SetConfig+0x524>
 8003476:	2340      	movs	r3, #64	; 0x40
 8003478:	e010      	b.n	800349c <UART_SetConfig+0x524>
 800347a:	2320      	movs	r3, #32
 800347c:	e00e      	b.n	800349c <UART_SetConfig+0x524>
 800347e:	2310      	movs	r3, #16
 8003480:	e00c      	b.n	800349c <UART_SetConfig+0x524>
 8003482:	230c      	movs	r3, #12
 8003484:	e00a      	b.n	800349c <UART_SetConfig+0x524>
 8003486:	230a      	movs	r3, #10
 8003488:	e008      	b.n	800349c <UART_SetConfig+0x524>
 800348a:	2308      	movs	r3, #8
 800348c:	e006      	b.n	800349c <UART_SetConfig+0x524>
 800348e:	2306      	movs	r3, #6
 8003490:	e004      	b.n	800349c <UART_SetConfig+0x524>
 8003492:	2304      	movs	r3, #4
 8003494:	e002      	b.n	800349c <UART_SetConfig+0x524>
 8003496:	2302      	movs	r3, #2
 8003498:	e000      	b.n	800349c <UART_SetConfig+0x524>
 800349a:	2301      	movs	r3, #1
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80034a2:	e071      	b.n	8003588 <UART_SetConfig+0x610>
 80034a4:	40008000 	.word	0x40008000
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	0001e848 	.word	0x0001e848
 80034b0:	0003d090 	.word	0x0003d090
 80034b4:	0007a120 	.word	0x0007a120
 80034b8:	000f4240 	.word	0x000f4240
 80034bc:	00145855 	.word	0x00145855
 80034c0:	00186a00 	.word	0x00186a00
 80034c4:	001e8480 	.word	0x001e8480
 80034c8:	0028b0aa 	.word	0x0028b0aa
 80034cc:	003d0900 	.word	0x003d0900
 80034d0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d04e      	beq.n	800357a <UART_SetConfig+0x602>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d047      	beq.n	8003574 <UART_SetConfig+0x5fc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d040      	beq.n	800356e <UART_SetConfig+0x5f6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d039      	beq.n	8003568 <UART_SetConfig+0x5f0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d032      	beq.n	8003562 <UART_SetConfig+0x5ea>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b05      	cmp	r3, #5
 8003502:	d02b      	beq.n	800355c <UART_SetConfig+0x5e4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b06      	cmp	r3, #6
 800350a:	d024      	beq.n	8003556 <UART_SetConfig+0x5de>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b07      	cmp	r3, #7
 8003512:	d01d      	beq.n	8003550 <UART_SetConfig+0x5d8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2b08      	cmp	r3, #8
 800351a:	d016      	beq.n	800354a <UART_SetConfig+0x5d2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2b09      	cmp	r3, #9
 8003522:	d00f      	beq.n	8003544 <UART_SetConfig+0x5cc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b0a      	cmp	r3, #10
 800352a:	d008      	beq.n	800353e <UART_SetConfig+0x5c6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	2b0b      	cmp	r3, #11
 8003532:	d101      	bne.n	8003538 <UART_SetConfig+0x5c0>
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	e022      	b.n	800357e <UART_SetConfig+0x606>
 8003538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353c:	e01f      	b.n	800357e <UART_SetConfig+0x606>
 800353e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003542:	e01c      	b.n	800357e <UART_SetConfig+0x606>
 8003544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003548:	e019      	b.n	800357e <UART_SetConfig+0x606>
 800354a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354e:	e016      	b.n	800357e <UART_SetConfig+0x606>
 8003550:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003554:	e013      	b.n	800357e <UART_SetConfig+0x606>
 8003556:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800355a:	e010      	b.n	800357e <UART_SetConfig+0x606>
 800355c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003560:	e00d      	b.n	800357e <UART_SetConfig+0x606>
 8003562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003566:	e00a      	b.n	800357e <UART_SetConfig+0x606>
 8003568:	f241 5355 	movw	r3, #5461	; 0x1555
 800356c:	e007      	b.n	800357e <UART_SetConfig+0x606>
 800356e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003572:	e004      	b.n	800357e <UART_SetConfig+0x606>
 8003574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003578:	e001      	b.n	800357e <UART_SetConfig+0x606>
 800357a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8003580:	e002      	b.n	8003588 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	76fb      	strb	r3, [r7, #27]
        break;
 8003586:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 86b7 	beq.w	80042fe <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	429a      	cmp	r2, r3
 800359e:	d305      	bcc.n	80035ac <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d903      	bls.n	80035b4 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	76fb      	strb	r3, [r7, #27]
 80035b0:	f000 bea5 	b.w	80042fe <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80035b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	f200 8277 	bhi.w	8003aac <UART_SetConfig+0xb34>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0x64c>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	08003aad 	.word	0x08003aad
 80035cc:	08003727 	.word	0x08003727
 80035d0:	08003aad 	.word	0x08003aad
 80035d4:	0800381d 	.word	0x0800381d
 80035d8:	08003aad 	.word	0x08003aad
 80035dc:	08003aad 	.word	0x08003aad
 80035e0:	08003aad 	.word	0x08003aad
 80035e4:	0800395b 	.word	0x0800395b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7fe fde6 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80035ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d067      	beq.n	80036ce <UART_SetConfig+0x756>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b01      	cmp	r3, #1
 8003604:	d05e      	beq.n	80036c4 <UART_SetConfig+0x74c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b02      	cmp	r3, #2
 800360c:	d055      	beq.n	80036ba <UART_SetConfig+0x742>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b03      	cmp	r3, #3
 8003614:	d04c      	beq.n	80036b0 <UART_SetConfig+0x738>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b04      	cmp	r3, #4
 800361c:	d043      	beq.n	80036a6 <UART_SetConfig+0x72e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b05      	cmp	r3, #5
 8003624:	d03a      	beq.n	800369c <UART_SetConfig+0x724>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b06      	cmp	r3, #6
 800362c:	d031      	beq.n	8003692 <UART_SetConfig+0x71a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b07      	cmp	r3, #7
 8003634:	d028      	beq.n	8003688 <UART_SetConfig+0x710>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b08      	cmp	r3, #8
 800363c:	d01f      	beq.n	800367e <UART_SetConfig+0x706>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b09      	cmp	r3, #9
 8003644:	d016      	beq.n	8003674 <UART_SetConfig+0x6fc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b0a      	cmp	r3, #10
 800364c:	d00d      	beq.n	800366a <UART_SetConfig+0x6f2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b0b      	cmp	r3, #11
 8003654:	d104      	bne.n	8003660 <UART_SetConfig+0x6e8>
 8003656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800365a:	f04f 0400 	mov.w	r4, #0
 800365e:	e03a      	b.n	80036d6 <UART_SetConfig+0x75e>
 8003660:	f04f 0301 	mov.w	r3, #1
 8003664:	f04f 0400 	mov.w	r4, #0
 8003668:	e035      	b.n	80036d6 <UART_SetConfig+0x75e>
 800366a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800366e:	f04f 0400 	mov.w	r4, #0
 8003672:	e030      	b.n	80036d6 <UART_SetConfig+0x75e>
 8003674:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003678:	f04f 0400 	mov.w	r4, #0
 800367c:	e02b      	b.n	80036d6 <UART_SetConfig+0x75e>
 800367e:	f04f 0320 	mov.w	r3, #32
 8003682:	f04f 0400 	mov.w	r4, #0
 8003686:	e026      	b.n	80036d6 <UART_SetConfig+0x75e>
 8003688:	f04f 0310 	mov.w	r3, #16
 800368c:	f04f 0400 	mov.w	r4, #0
 8003690:	e021      	b.n	80036d6 <UART_SetConfig+0x75e>
 8003692:	f04f 030c 	mov.w	r3, #12
 8003696:	f04f 0400 	mov.w	r4, #0
 800369a:	e01c      	b.n	80036d6 <UART_SetConfig+0x75e>
 800369c:	f04f 030a 	mov.w	r3, #10
 80036a0:	f04f 0400 	mov.w	r4, #0
 80036a4:	e017      	b.n	80036d6 <UART_SetConfig+0x75e>
 80036a6:	f04f 0308 	mov.w	r3, #8
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	e012      	b.n	80036d6 <UART_SetConfig+0x75e>
 80036b0:	f04f 0306 	mov.w	r3, #6
 80036b4:	f04f 0400 	mov.w	r4, #0
 80036b8:	e00d      	b.n	80036d6 <UART_SetConfig+0x75e>
 80036ba:	f04f 0304 	mov.w	r3, #4
 80036be:	f04f 0400 	mov.w	r4, #0
 80036c2:	e008      	b.n	80036d6 <UART_SetConfig+0x75e>
 80036c4:	f04f 0302 	mov.w	r3, #2
 80036c8:	f04f 0400 	mov.w	r4, #0
 80036cc:	e003      	b.n	80036d6 <UART_SetConfig+0x75e>
 80036ce:	f04f 0301 	mov.w	r3, #1
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4623      	mov	r3, r4
 80036da:	f7fc fde9 	bl	80002b0 <__aeabi_uldivmod>
 80036de:	4603      	mov	r3, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	4619      	mov	r1, r3
 80036e4:	4622      	mov	r2, r4
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	f04f 0400 	mov.w	r4, #0
 80036ee:	0214      	lsls	r4, r2, #8
 80036f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036f4:	020b      	lsls	r3, r1, #8
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6852      	ldr	r2, [r2, #4]
 80036fa:	0852      	lsrs	r2, r2, #1
 80036fc:	4611      	mov	r1, r2
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	eb13 0b01 	adds.w	fp, r3, r1
 8003706:	eb44 0c02 	adc.w	ip, r4, r2
 800370a:	4658      	mov	r0, fp
 800370c:	4661      	mov	r1, ip
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	461a      	mov	r2, r3
 8003718:	4623      	mov	r3, r4
 800371a:	f7fc fdc9 	bl	80002b0 <__aeabi_uldivmod>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8003724:	e1c5      	b.n	8003ab2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b00      	cmp	r3, #0
 800372c:	d05b      	beq.n	80037e6 <UART_SetConfig+0x86e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b01      	cmp	r3, #1
 8003734:	d053      	beq.n	80037de <UART_SetConfig+0x866>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b02      	cmp	r3, #2
 800373c:	d04b      	beq.n	80037d6 <UART_SetConfig+0x85e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b03      	cmp	r3, #3
 8003744:	d043      	beq.n	80037ce <UART_SetConfig+0x856>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b04      	cmp	r3, #4
 800374c:	d03b      	beq.n	80037c6 <UART_SetConfig+0x84e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2b05      	cmp	r3, #5
 8003754:	d033      	beq.n	80037be <UART_SetConfig+0x846>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b06      	cmp	r3, #6
 800375c:	d02b      	beq.n	80037b6 <UART_SetConfig+0x83e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b07      	cmp	r3, #7
 8003764:	d023      	beq.n	80037ae <UART_SetConfig+0x836>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b08      	cmp	r3, #8
 800376c:	d01b      	beq.n	80037a6 <UART_SetConfig+0x82e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b09      	cmp	r3, #9
 8003774:	d013      	beq.n	800379e <UART_SetConfig+0x826>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b0a      	cmp	r3, #10
 800377c:	d00b      	beq.n	8003796 <UART_SetConfig+0x81e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b0b      	cmp	r3, #11
 8003784:	d103      	bne.n	800378e <UART_SetConfig+0x816>
 8003786:	4bae      	ldr	r3, [pc, #696]	; (8003a40 <UART_SetConfig+0xac8>)
 8003788:	f04f 0400 	mov.w	r4, #0
 800378c:	e02e      	b.n	80037ec <UART_SetConfig+0x874>
 800378e:	4bad      	ldr	r3, [pc, #692]	; (8003a44 <UART_SetConfig+0xacc>)
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	e02a      	b.n	80037ec <UART_SetConfig+0x874>
 8003796:	4bac      	ldr	r3, [pc, #688]	; (8003a48 <UART_SetConfig+0xad0>)
 8003798:	f04f 0400 	mov.w	r4, #0
 800379c:	e026      	b.n	80037ec <UART_SetConfig+0x874>
 800379e:	4bab      	ldr	r3, [pc, #684]	; (8003a4c <UART_SetConfig+0xad4>)
 80037a0:	f04f 0400 	mov.w	r4, #0
 80037a4:	e022      	b.n	80037ec <UART_SetConfig+0x874>
 80037a6:	4baa      	ldr	r3, [pc, #680]	; (8003a50 <UART_SetConfig+0xad8>)
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	e01e      	b.n	80037ec <UART_SetConfig+0x874>
 80037ae:	4ba9      	ldr	r3, [pc, #676]	; (8003a54 <UART_SetConfig+0xadc>)
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	e01a      	b.n	80037ec <UART_SetConfig+0x874>
 80037b6:	a49e      	add	r4, pc, #632	; (adr r4, 8003a30 <UART_SetConfig+0xab8>)
 80037b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037bc:	e016      	b.n	80037ec <UART_SetConfig+0x874>
 80037be:	4ba6      	ldr	r3, [pc, #664]	; (8003a58 <UART_SetConfig+0xae0>)
 80037c0:	f04f 0400 	mov.w	r4, #0
 80037c4:	e012      	b.n	80037ec <UART_SetConfig+0x874>
 80037c6:	4ba5      	ldr	r3, [pc, #660]	; (8003a5c <UART_SetConfig+0xae4>)
 80037c8:	f04f 0400 	mov.w	r4, #0
 80037cc:	e00e      	b.n	80037ec <UART_SetConfig+0x874>
 80037ce:	a49a      	add	r4, pc, #616	; (adr r4, 8003a38 <UART_SetConfig+0xac0>)
 80037d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037d4:	e00a      	b.n	80037ec <UART_SetConfig+0x874>
 80037d6:	4ba2      	ldr	r3, [pc, #648]	; (8003a60 <UART_SetConfig+0xae8>)
 80037d8:	f04f 0400 	mov.w	r4, #0
 80037dc:	e006      	b.n	80037ec <UART_SetConfig+0x874>
 80037de:	4ba1      	ldr	r3, [pc, #644]	; (8003a64 <UART_SetConfig+0xaec>)
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	e002      	b.n	80037ec <UART_SetConfig+0x874>
 80037e6:	4b97      	ldr	r3, [pc, #604]	; (8003a44 <UART_SetConfig+0xacc>)
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6852      	ldr	r2, [r2, #4]
 80037f0:	0852      	lsrs	r2, r2, #1
 80037f2:	4611      	mov	r1, r2
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	eb13 0b01 	adds.w	fp, r3, r1
 80037fc:	eb44 0c02 	adc.w	ip, r4, r2
 8003800:	4658      	mov	r0, fp
 8003802:	4661      	mov	r1, ip
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f04f 0400 	mov.w	r4, #0
 800380c:	461a      	mov	r2, r3
 800380e:	4623      	mov	r3, r4
 8003810:	f7fc fd4e 	bl	80002b0 <__aeabi_uldivmod>
 8003814:	4603      	mov	r3, r0
 8003816:	460c      	mov	r4, r1
 8003818:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800381a:	e14a      	b.n	8003ab2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800381c:	f7fe fc36 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8003820:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4618      	mov	r0, r3
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d067      	beq.n	8003902 <UART_SetConfig+0x98a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b01      	cmp	r3, #1
 8003838:	d05e      	beq.n	80038f8 <UART_SetConfig+0x980>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b02      	cmp	r3, #2
 8003840:	d055      	beq.n	80038ee <UART_SetConfig+0x976>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b03      	cmp	r3, #3
 8003848:	d04c      	beq.n	80038e4 <UART_SetConfig+0x96c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b04      	cmp	r3, #4
 8003850:	d043      	beq.n	80038da <UART_SetConfig+0x962>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b05      	cmp	r3, #5
 8003858:	d03a      	beq.n	80038d0 <UART_SetConfig+0x958>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b06      	cmp	r3, #6
 8003860:	d031      	beq.n	80038c6 <UART_SetConfig+0x94e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2b07      	cmp	r3, #7
 8003868:	d028      	beq.n	80038bc <UART_SetConfig+0x944>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2b08      	cmp	r3, #8
 8003870:	d01f      	beq.n	80038b2 <UART_SetConfig+0x93a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b09      	cmp	r3, #9
 8003878:	d016      	beq.n	80038a8 <UART_SetConfig+0x930>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b0a      	cmp	r3, #10
 8003880:	d00d      	beq.n	800389e <UART_SetConfig+0x926>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2b0b      	cmp	r3, #11
 8003888:	d104      	bne.n	8003894 <UART_SetConfig+0x91c>
 800388a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	e03a      	b.n	800390a <UART_SetConfig+0x992>
 8003894:	f04f 0301 	mov.w	r3, #1
 8003898:	f04f 0400 	mov.w	r4, #0
 800389c:	e035      	b.n	800390a <UART_SetConfig+0x992>
 800389e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80038a2:	f04f 0400 	mov.w	r4, #0
 80038a6:	e030      	b.n	800390a <UART_SetConfig+0x992>
 80038a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	e02b      	b.n	800390a <UART_SetConfig+0x992>
 80038b2:	f04f 0320 	mov.w	r3, #32
 80038b6:	f04f 0400 	mov.w	r4, #0
 80038ba:	e026      	b.n	800390a <UART_SetConfig+0x992>
 80038bc:	f04f 0310 	mov.w	r3, #16
 80038c0:	f04f 0400 	mov.w	r4, #0
 80038c4:	e021      	b.n	800390a <UART_SetConfig+0x992>
 80038c6:	f04f 030c 	mov.w	r3, #12
 80038ca:	f04f 0400 	mov.w	r4, #0
 80038ce:	e01c      	b.n	800390a <UART_SetConfig+0x992>
 80038d0:	f04f 030a 	mov.w	r3, #10
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	e017      	b.n	800390a <UART_SetConfig+0x992>
 80038da:	f04f 0308 	mov.w	r3, #8
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	e012      	b.n	800390a <UART_SetConfig+0x992>
 80038e4:	f04f 0306 	mov.w	r3, #6
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	e00d      	b.n	800390a <UART_SetConfig+0x992>
 80038ee:	f04f 0304 	mov.w	r3, #4
 80038f2:	f04f 0400 	mov.w	r4, #0
 80038f6:	e008      	b.n	800390a <UART_SetConfig+0x992>
 80038f8:	f04f 0302 	mov.w	r3, #2
 80038fc:	f04f 0400 	mov.w	r4, #0
 8003900:	e003      	b.n	800390a <UART_SetConfig+0x992>
 8003902:	f04f 0301 	mov.w	r3, #1
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	461a      	mov	r2, r3
 800390c:	4623      	mov	r3, r4
 800390e:	f7fc fccf 	bl	80002b0 <__aeabi_uldivmod>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	4619      	mov	r1, r3
 8003918:	4622      	mov	r2, r4
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	f04f 0400 	mov.w	r4, #0
 8003922:	0214      	lsls	r4, r2, #8
 8003924:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003928:	020b      	lsls	r3, r1, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6852      	ldr	r2, [r2, #4]
 800392e:	0852      	lsrs	r2, r2, #1
 8003930:	4611      	mov	r1, r2
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	eb13 0b01 	adds.w	fp, r3, r1
 800393a:	eb44 0c02 	adc.w	ip, r4, r2
 800393e:	4658      	mov	r0, fp
 8003940:	4661      	mov	r1, ip
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f04f 0400 	mov.w	r4, #0
 800394a:	461a      	mov	r2, r3
 800394c:	4623      	mov	r3, r4
 800394e:	f7fc fcaf 	bl	80002b0 <__aeabi_uldivmod>
 8003952:	4603      	mov	r3, r0
 8003954:	460c      	mov	r4, r1
 8003956:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8003958:	e0ab      	b.n	8003ab2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8088 	beq.w	8003a74 <UART_SetConfig+0xafc>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2b01      	cmp	r3, #1
 800396a:	d05b      	beq.n	8003a24 <UART_SetConfig+0xaac>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	2b02      	cmp	r3, #2
 8003972:	d052      	beq.n	8003a1a <UART_SetConfig+0xaa2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2b03      	cmp	r3, #3
 800397a:	d04a      	beq.n	8003a12 <UART_SetConfig+0xa9a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b04      	cmp	r3, #4
 8003982:	d041      	beq.n	8003a08 <UART_SetConfig+0xa90>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b05      	cmp	r3, #5
 800398a:	d039      	beq.n	8003a00 <UART_SetConfig+0xa88>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2b06      	cmp	r3, #6
 8003992:	d031      	beq.n	80039f8 <UART_SetConfig+0xa80>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b07      	cmp	r3, #7
 800399a:	d028      	beq.n	80039ee <UART_SetConfig+0xa76>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d01f      	beq.n	80039e4 <UART_SetConfig+0xa6c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d016      	beq.n	80039da <UART_SetConfig+0xa62>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	2b0a      	cmp	r3, #10
 80039b2:	d00d      	beq.n	80039d0 <UART_SetConfig+0xa58>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b0b      	cmp	r3, #11
 80039ba:	d104      	bne.n	80039c6 <UART_SetConfig+0xa4e>
 80039bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c0:	f04f 0400 	mov.w	r4, #0
 80039c4:	e05a      	b.n	8003a7c <UART_SetConfig+0xb04>
 80039c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80039ca:	f04f 0400 	mov.w	r4, #0
 80039ce:	e055      	b.n	8003a7c <UART_SetConfig+0xb04>
 80039d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	e050      	b.n	8003a7c <UART_SetConfig+0xb04>
 80039da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039de:	f04f 0400 	mov.w	r4, #0
 80039e2:	e04b      	b.n	8003a7c <UART_SetConfig+0xb04>
 80039e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039e8:	f04f 0400 	mov.w	r4, #0
 80039ec:	e046      	b.n	8003a7c <UART_SetConfig+0xb04>
 80039ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039f2:	f04f 0400 	mov.w	r4, #0
 80039f6:	e041      	b.n	8003a7c <UART_SetConfig+0xb04>
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <UART_SetConfig+0xaf0>)
 80039fa:	f04f 0400 	mov.w	r4, #0
 80039fe:	e03d      	b.n	8003a7c <UART_SetConfig+0xb04>
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <UART_SetConfig+0xaf4>)
 8003a02:	f04f 0400 	mov.w	r4, #0
 8003a06:	e039      	b.n	8003a7c <UART_SetConfig+0xb04>
 8003a08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	e034      	b.n	8003a7c <UART_SetConfig+0xb04>
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <UART_SetConfig+0xaf8>)
 8003a14:	f04f 0400 	mov.w	r4, #0
 8003a18:	e030      	b.n	8003a7c <UART_SetConfig+0xb04>
 8003a1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a1e:	f04f 0400 	mov.w	r4, #0
 8003a22:	e02b      	b.n	8003a7c <UART_SetConfig+0xb04>
 8003a24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a28:	f04f 0400 	mov.w	r4, #0
 8003a2c:	e026      	b.n	8003a7c <UART_SetConfig+0xb04>
 8003a2e:	bf00      	nop
 8003a30:	14585500 	.word	0x14585500
 8003a34:	00000000 	.word	0x00000000
 8003a38:	28b0aa00 	.word	0x28b0aa00
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	f4240000 	.word	0xf4240000
 8003a48:	01e84800 	.word	0x01e84800
 8003a4c:	03d09000 	.word	0x03d09000
 8003a50:	07a12000 	.word	0x07a12000
 8003a54:	0f424000 	.word	0x0f424000
 8003a58:	186a0000 	.word	0x186a0000
 8003a5c:	1e848000 	.word	0x1e848000
 8003a60:	3d090000 	.word	0x3d090000
 8003a64:	7a120000 	.word	0x7a120000
 8003a68:	000aaa00 	.word	0x000aaa00
 8003a6c:	000ccc00 	.word	0x000ccc00
 8003a70:	00155500 	.word	0x00155500
 8003a74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003a78:	f04f 0400 	mov.w	r4, #0
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6852      	ldr	r2, [r2, #4]
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	4611      	mov	r1, r2
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	eb13 0b01 	adds.w	fp, r3, r1
 8003a8c:	eb44 0c02 	adc.w	ip, r4, r2
 8003a90:	4658      	mov	r0, fp
 8003a92:	4661      	mov	r1, ip
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f04f 0400 	mov.w	r4, #0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	f7fc fc06 	bl	80002b0 <__aeabi_uldivmod>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8003aaa:	e002      	b.n	8003ab2 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	76fb      	strb	r3, [r7, #27]
            break;
 8003ab0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab8:	d309      	bcc.n	8003ace <UART_SetConfig+0xb56>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac0:	d205      	bcs.n	8003ace <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	f000 bc18 	b.w	80042fe <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	76fb      	strb	r3, [r7, #27]
 8003ad2:	f000 bc14 	b.w	80042fe <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	f040 8204 	bne.w	8003eea <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8003ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	f200 81df 	bhi.w	8003eaa <UART_SetConfig+0xf32>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <UART_SetConfig+0xb7c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003bd1 	.word	0x08003bd1
 8003afc:	08003c89 	.word	0x08003c89
 8003b00:	08003eab 	.word	0x08003eab
 8003b04:	08003d31 	.word	0x08003d31
 8003b08:	08003eab 	.word	0x08003eab
 8003b0c:	08003eab 	.word	0x08003eab
 8003b10:	08003eab 	.word	0x08003eab
 8003b14:	08003de9 	.word	0x08003de9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b18:	f7fe fb4e 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <UART_SetConfig+0xc38>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d03e      	beq.n	8003bac <UART_SetConfig+0xc34>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d038      	beq.n	8003ba8 <UART_SetConfig+0xc30>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d032      	beq.n	8003ba4 <UART_SetConfig+0xc2c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d02c      	beq.n	8003ba0 <UART_SetConfig+0xc28>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d026      	beq.n	8003b9c <UART_SetConfig+0xc24>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d020      	beq.n	8003b98 <UART_SetConfig+0xc20>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	d01a      	beq.n	8003b94 <UART_SetConfig+0xc1c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d014      	beq.n	8003b90 <UART_SetConfig+0xc18>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b09      	cmp	r3, #9
 8003b6c:	d00e      	beq.n	8003b8c <UART_SetConfig+0xc14>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	2b0a      	cmp	r3, #10
 8003b74:	d008      	beq.n	8003b88 <UART_SetConfig+0xc10>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2b0b      	cmp	r3, #11
 8003b7c:	d102      	bne.n	8003b84 <UART_SetConfig+0xc0c>
 8003b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b82:	e016      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	e012      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003b90:	2320      	movs	r3, #32
 8003b92:	e00e      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003b94:	2310      	movs	r3, #16
 8003b96:	e00c      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003b98:	230c      	movs	r3, #12
 8003b9a:	e00a      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	e008      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	e006      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	e004      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	e002      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e000      	b.n	8003bb2 <UART_SetConfig+0xc3a>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	005a      	lsls	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bce:	e16f      	b.n	8003eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7fe fb08 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8003bd4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d044      	beq.n	8003c68 <UART_SetConfig+0xcf0>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d03e      	beq.n	8003c64 <UART_SetConfig+0xcec>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d038      	beq.n	8003c60 <UART_SetConfig+0xce8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d032      	beq.n	8003c5c <UART_SetConfig+0xce4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d02c      	beq.n	8003c58 <UART_SetConfig+0xce0>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d026      	beq.n	8003c54 <UART_SetConfig+0xcdc>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d020      	beq.n	8003c50 <UART_SetConfig+0xcd8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b07      	cmp	r3, #7
 8003c14:	d01a      	beq.n	8003c4c <UART_SetConfig+0xcd4>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d014      	beq.n	8003c48 <UART_SetConfig+0xcd0>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2b09      	cmp	r3, #9
 8003c24:	d00e      	beq.n	8003c44 <UART_SetConfig+0xccc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2b0a      	cmp	r3, #10
 8003c2c:	d008      	beq.n	8003c40 <UART_SetConfig+0xcc8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b0b      	cmp	r3, #11
 8003c34:	d102      	bne.n	8003c3c <UART_SetConfig+0xcc4>
 8003c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c3a:	e016      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e014      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	e012      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c44:	2340      	movs	r3, #64	; 0x40
 8003c46:	e010      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c48:	2320      	movs	r3, #32
 8003c4a:	e00e      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	e00c      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c50:	230c      	movs	r3, #12
 8003c52:	e00a      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c54:	230a      	movs	r3, #10
 8003c56:	e008      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	e006      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c5c:	2306      	movs	r3, #6
 8003c5e:	e004      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c60:	2304      	movs	r3, #4
 8003c62:	e002      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e000      	b.n	8003c6a <UART_SetConfig+0xcf2>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	005a      	lsls	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	441a      	add	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c86:	e113      	b.n	8003eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d043      	beq.n	8003d18 <UART_SetConfig+0xda0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d03d      	beq.n	8003d14 <UART_SetConfig+0xd9c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d037      	beq.n	8003d10 <UART_SetConfig+0xd98>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d031      	beq.n	8003d0c <UART_SetConfig+0xd94>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d02b      	beq.n	8003d08 <UART_SetConfig+0xd90>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d025      	beq.n	8003d04 <UART_SetConfig+0xd8c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d01f      	beq.n	8003d00 <UART_SetConfig+0xd88>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b07      	cmp	r3, #7
 8003cc6:	d019      	beq.n	8003cfc <UART_SetConfig+0xd84>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d013      	beq.n	8003cf8 <UART_SetConfig+0xd80>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b09      	cmp	r3, #9
 8003cd6:	d00d      	beq.n	8003cf4 <UART_SetConfig+0xd7c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b0a      	cmp	r3, #10
 8003cde:	d007      	beq.n	8003cf0 <UART_SetConfig+0xd78>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2b0b      	cmp	r3, #11
 8003ce6:	d101      	bne.n	8003cec <UART_SetConfig+0xd74>
 8003ce8:	4b8d      	ldr	r3, [pc, #564]	; (8003f20 <UART_SetConfig+0xfa8>)
 8003cea:	e016      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003cec:	4b8d      	ldr	r3, [pc, #564]	; (8003f24 <UART_SetConfig+0xfac>)
 8003cee:	e014      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003cf0:	4b8d      	ldr	r3, [pc, #564]	; (8003f28 <UART_SetConfig+0xfb0>)
 8003cf2:	e012      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003cf4:	4b8d      	ldr	r3, [pc, #564]	; (8003f2c <UART_SetConfig+0xfb4>)
 8003cf6:	e010      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003cf8:	4b8d      	ldr	r3, [pc, #564]	; (8003f30 <UART_SetConfig+0xfb8>)
 8003cfa:	e00e      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003cfc:	4b8d      	ldr	r3, [pc, #564]	; (8003f34 <UART_SetConfig+0xfbc>)
 8003cfe:	e00c      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003d00:	4b8d      	ldr	r3, [pc, #564]	; (8003f38 <UART_SetConfig+0xfc0>)
 8003d02:	e00a      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003d04:	4b8d      	ldr	r3, [pc, #564]	; (8003f3c <UART_SetConfig+0xfc4>)
 8003d06:	e008      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003d08:	4b8d      	ldr	r3, [pc, #564]	; (8003f40 <UART_SetConfig+0xfc8>)
 8003d0a:	e006      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003d0c:	4b8d      	ldr	r3, [pc, #564]	; (8003f44 <UART_SetConfig+0xfcc>)
 8003d0e:	e004      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003d10:	4b8d      	ldr	r3, [pc, #564]	; (8003f48 <UART_SetConfig+0xfd0>)
 8003d12:	e002      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003d14:	4b8d      	ldr	r3, [pc, #564]	; (8003f4c <UART_SetConfig+0xfd4>)
 8003d16:	e000      	b.n	8003d1a <UART_SetConfig+0xda2>
 8003d18:	4b82      	ldr	r3, [pc, #520]	; (8003f24 <UART_SetConfig+0xfac>)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6852      	ldr	r2, [r2, #4]
 8003d1e:	0852      	lsrs	r2, r2, #1
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d2e:	e0bf      	b.n	8003eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d30:	f7fe f9ac 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8003d34:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d044      	beq.n	8003dc8 <UART_SetConfig+0xe50>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d03e      	beq.n	8003dc4 <UART_SetConfig+0xe4c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d038      	beq.n	8003dc0 <UART_SetConfig+0xe48>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d032      	beq.n	8003dbc <UART_SetConfig+0xe44>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d02c      	beq.n	8003db8 <UART_SetConfig+0xe40>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d026      	beq.n	8003db4 <UART_SetConfig+0xe3c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d020      	beq.n	8003db0 <UART_SetConfig+0xe38>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b07      	cmp	r3, #7
 8003d74:	d01a      	beq.n	8003dac <UART_SetConfig+0xe34>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d014      	beq.n	8003da8 <UART_SetConfig+0xe30>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b09      	cmp	r3, #9
 8003d84:	d00e      	beq.n	8003da4 <UART_SetConfig+0xe2c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2b0a      	cmp	r3, #10
 8003d8c:	d008      	beq.n	8003da0 <UART_SetConfig+0xe28>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2b0b      	cmp	r3, #11
 8003d94:	d102      	bne.n	8003d9c <UART_SetConfig+0xe24>
 8003d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d9a:	e016      	b.n	8003dca <UART_SetConfig+0xe52>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e014      	b.n	8003dca <UART_SetConfig+0xe52>
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	e012      	b.n	8003dca <UART_SetConfig+0xe52>
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	e010      	b.n	8003dca <UART_SetConfig+0xe52>
 8003da8:	2320      	movs	r3, #32
 8003daa:	e00e      	b.n	8003dca <UART_SetConfig+0xe52>
 8003dac:	2310      	movs	r3, #16
 8003dae:	e00c      	b.n	8003dca <UART_SetConfig+0xe52>
 8003db0:	230c      	movs	r3, #12
 8003db2:	e00a      	b.n	8003dca <UART_SetConfig+0xe52>
 8003db4:	230a      	movs	r3, #10
 8003db6:	e008      	b.n	8003dca <UART_SetConfig+0xe52>
 8003db8:	2308      	movs	r3, #8
 8003dba:	e006      	b.n	8003dca <UART_SetConfig+0xe52>
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	e004      	b.n	8003dca <UART_SetConfig+0xe52>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	e002      	b.n	8003dca <UART_SetConfig+0xe52>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e000      	b.n	8003dca <UART_SetConfig+0xe52>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	005a      	lsls	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8003de6:	e063      	b.n	8003eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d04f      	beq.n	8003e90 <UART_SetConfig+0xf18>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d048      	beq.n	8003e8a <UART_SetConfig+0xf12>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d041      	beq.n	8003e84 <UART_SetConfig+0xf0c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d03a      	beq.n	8003e7e <UART_SetConfig+0xf06>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d033      	beq.n	8003e78 <UART_SetConfig+0xf00>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2b05      	cmp	r3, #5
 8003e16:	d02c      	beq.n	8003e72 <UART_SetConfig+0xefa>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	2b06      	cmp	r3, #6
 8003e1e:	d025      	beq.n	8003e6c <UART_SetConfig+0xef4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d01e      	beq.n	8003e66 <UART_SetConfig+0xeee>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d017      	beq.n	8003e60 <UART_SetConfig+0xee8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b09      	cmp	r3, #9
 8003e36:	d010      	beq.n	8003e5a <UART_SetConfig+0xee2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2b0a      	cmp	r3, #10
 8003e3e:	d009      	beq.n	8003e54 <UART_SetConfig+0xedc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2b0b      	cmp	r3, #11
 8003e46:	d102      	bne.n	8003e4e <UART_SetConfig+0xed6>
 8003e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e4c:	e022      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e52:	e01f      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e58:	e01c      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e5e:	e019      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e64:	e016      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6a:	e013      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e6c:	f241 5354 	movw	r3, #5460	; 0x1554
 8003e70:	e010      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e72:	f641 1398 	movw	r3, #6552	; 0x1998
 8003e76:	e00d      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e7c:	e00a      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e7e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003e82:	e007      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e88:	e004      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	e001      	b.n	8003e94 <UART_SetConfig+0xf1c>
 8003e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6852      	ldr	r2, [r2, #4]
 8003e98:	0852      	lsrs	r2, r2, #1
 8003e9a:	441a      	add	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ea8:	e002      	b.n	8003eb0 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	76fb      	strb	r3, [r7, #27]
        break;
 8003eae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d916      	bls.n	8003ee4 <UART_SetConfig+0xf6c>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d212      	bcs.n	8003ee4 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f023 030f 	bic.w	r3, r3, #15
 8003ec6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	89fb      	ldrh	r3, [r7, #14]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	89fa      	ldrh	r2, [r7, #14]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	e20c      	b.n	80042fe <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	76fb      	strb	r3, [r7, #27]
 8003ee8:	e209      	b.n	80042fe <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8003eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	f200 81f4 	bhi.w	80042dc <UART_SetConfig+0x1364>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <UART_SetConfig+0xf84>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08004007 	.word	0x08004007
 8003f04:	080040bd 	.word	0x080040bd
 8003f08:	080042dd 	.word	0x080042dd
 8003f0c:	08004167 	.word	0x08004167
 8003f10:	080042dd 	.word	0x080042dd
 8003f14:	080042dd 	.word	0x080042dd
 8003f18:	080042dd 	.word	0x080042dd
 8003f1c:	0800421d 	.word	0x0800421d
 8003f20:	0001e848 	.word	0x0001e848
 8003f24:	01e84800 	.word	0x01e84800
 8003f28:	0003d090 	.word	0x0003d090
 8003f2c:	0007a120 	.word	0x0007a120
 8003f30:	000f4240 	.word	0x000f4240
 8003f34:	001e8480 	.word	0x001e8480
 8003f38:	0028b0aa 	.word	0x0028b0aa
 8003f3c:	0030d400 	.word	0x0030d400
 8003f40:	003d0900 	.word	0x003d0900
 8003f44:	00516154 	.word	0x00516154
 8003f48:	007a1200 	.word	0x007a1200
 8003f4c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe f932 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8003f54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d044      	beq.n	8003fe8 <UART_SetConfig+0x1070>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d03e      	beq.n	8003fe4 <UART_SetConfig+0x106c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d038      	beq.n	8003fe0 <UART_SetConfig+0x1068>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d032      	beq.n	8003fdc <UART_SetConfig+0x1064>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d02c      	beq.n	8003fd8 <UART_SetConfig+0x1060>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d026      	beq.n	8003fd4 <UART_SetConfig+0x105c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d020      	beq.n	8003fd0 <UART_SetConfig+0x1058>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b07      	cmp	r3, #7
 8003f94:	d01a      	beq.n	8003fcc <UART_SetConfig+0x1054>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d014      	beq.n	8003fc8 <UART_SetConfig+0x1050>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	d00e      	beq.n	8003fc4 <UART_SetConfig+0x104c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b0a      	cmp	r3, #10
 8003fac:	d008      	beq.n	8003fc0 <UART_SetConfig+0x1048>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b0b      	cmp	r3, #11
 8003fb4:	d102      	bne.n	8003fbc <UART_SetConfig+0x1044>
 8003fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fba:	e016      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e014      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	e012      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fc4:	2340      	movs	r3, #64	; 0x40
 8003fc6:	e010      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e00e      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	e00c      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	e00a      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fd4:	230a      	movs	r3, #10
 8003fd6:	e008      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	e006      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fdc:	2306      	movs	r3, #6
 8003fde:	e004      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	e002      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e000      	b.n	8003fea <UART_SetConfig+0x1072>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	b29b      	uxth	r3, r3
 8004002:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004004:	e16d      	b.n	80042e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004006:	f7fe f8ed 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 800400a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2b00      	cmp	r3, #0
 8004012:	d044      	beq.n	800409e <UART_SetConfig+0x1126>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b01      	cmp	r3, #1
 800401a:	d03e      	beq.n	800409a <UART_SetConfig+0x1122>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b02      	cmp	r3, #2
 8004022:	d038      	beq.n	8004096 <UART_SetConfig+0x111e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b03      	cmp	r3, #3
 800402a:	d032      	beq.n	8004092 <UART_SetConfig+0x111a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b04      	cmp	r3, #4
 8004032:	d02c      	beq.n	800408e <UART_SetConfig+0x1116>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b05      	cmp	r3, #5
 800403a:	d026      	beq.n	800408a <UART_SetConfig+0x1112>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b06      	cmp	r3, #6
 8004042:	d020      	beq.n	8004086 <UART_SetConfig+0x110e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	2b07      	cmp	r3, #7
 800404a:	d01a      	beq.n	8004082 <UART_SetConfig+0x110a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	2b08      	cmp	r3, #8
 8004052:	d014      	beq.n	800407e <UART_SetConfig+0x1106>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	2b09      	cmp	r3, #9
 800405a:	d00e      	beq.n	800407a <UART_SetConfig+0x1102>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b0a      	cmp	r3, #10
 8004062:	d008      	beq.n	8004076 <UART_SetConfig+0x10fe>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	2b0b      	cmp	r3, #11
 800406a:	d102      	bne.n	8004072 <UART_SetConfig+0x10fa>
 800406c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004070:	e016      	b.n	80040a0 <UART_SetConfig+0x1128>
 8004072:	2301      	movs	r3, #1
 8004074:	e014      	b.n	80040a0 <UART_SetConfig+0x1128>
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	e012      	b.n	80040a0 <UART_SetConfig+0x1128>
 800407a:	2340      	movs	r3, #64	; 0x40
 800407c:	e010      	b.n	80040a0 <UART_SetConfig+0x1128>
 800407e:	2320      	movs	r3, #32
 8004080:	e00e      	b.n	80040a0 <UART_SetConfig+0x1128>
 8004082:	2310      	movs	r3, #16
 8004084:	e00c      	b.n	80040a0 <UART_SetConfig+0x1128>
 8004086:	230c      	movs	r3, #12
 8004088:	e00a      	b.n	80040a0 <UART_SetConfig+0x1128>
 800408a:	230a      	movs	r3, #10
 800408c:	e008      	b.n	80040a0 <UART_SetConfig+0x1128>
 800408e:	2308      	movs	r3, #8
 8004090:	e006      	b.n	80040a0 <UART_SetConfig+0x1128>
 8004092:	2306      	movs	r3, #6
 8004094:	e004      	b.n	80040a0 <UART_SetConfig+0x1128>
 8004096:	2304      	movs	r3, #4
 8004098:	e002      	b.n	80040a0 <UART_SetConfig+0x1128>
 800409a:	2302      	movs	r3, #2
 800409c:	e000      	b.n	80040a0 <UART_SetConfig+0x1128>
 800409e:	2301      	movs	r3, #1
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80040ba:	e112      	b.n	80042e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d044      	beq.n	800414e <UART_SetConfig+0x11d6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d03e      	beq.n	800414a <UART_SetConfig+0x11d2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d038      	beq.n	8004146 <UART_SetConfig+0x11ce>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d032      	beq.n	8004142 <UART_SetConfig+0x11ca>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d02c      	beq.n	800413e <UART_SetConfig+0x11c6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d026      	beq.n	800413a <UART_SetConfig+0x11c2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2b06      	cmp	r3, #6
 80040f2:	d020      	beq.n	8004136 <UART_SetConfig+0x11be>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2b07      	cmp	r3, #7
 80040fa:	d01a      	beq.n	8004132 <UART_SetConfig+0x11ba>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2b08      	cmp	r3, #8
 8004102:	d014      	beq.n	800412e <UART_SetConfig+0x11b6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b09      	cmp	r3, #9
 800410a:	d00e      	beq.n	800412a <UART_SetConfig+0x11b2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b0a      	cmp	r3, #10
 8004112:	d008      	beq.n	8004126 <UART_SetConfig+0x11ae>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b0b      	cmp	r3, #11
 800411a:	d102      	bne.n	8004122 <UART_SetConfig+0x11aa>
 800411c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004120:	e016      	b.n	8004150 <UART_SetConfig+0x11d8>
 8004122:	4b81      	ldr	r3, [pc, #516]	; (8004328 <UART_SetConfig+0x13b0>)
 8004124:	e014      	b.n	8004150 <UART_SetConfig+0x11d8>
 8004126:	4b81      	ldr	r3, [pc, #516]	; (800432c <UART_SetConfig+0x13b4>)
 8004128:	e012      	b.n	8004150 <UART_SetConfig+0x11d8>
 800412a:	4b81      	ldr	r3, [pc, #516]	; (8004330 <UART_SetConfig+0x13b8>)
 800412c:	e010      	b.n	8004150 <UART_SetConfig+0x11d8>
 800412e:	4b81      	ldr	r3, [pc, #516]	; (8004334 <UART_SetConfig+0x13bc>)
 8004130:	e00e      	b.n	8004150 <UART_SetConfig+0x11d8>
 8004132:	4b81      	ldr	r3, [pc, #516]	; (8004338 <UART_SetConfig+0x13c0>)
 8004134:	e00c      	b.n	8004150 <UART_SetConfig+0x11d8>
 8004136:	4b81      	ldr	r3, [pc, #516]	; (800433c <UART_SetConfig+0x13c4>)
 8004138:	e00a      	b.n	8004150 <UART_SetConfig+0x11d8>
 800413a:	4b81      	ldr	r3, [pc, #516]	; (8004340 <UART_SetConfig+0x13c8>)
 800413c:	e008      	b.n	8004150 <UART_SetConfig+0x11d8>
 800413e:	4b81      	ldr	r3, [pc, #516]	; (8004344 <UART_SetConfig+0x13cc>)
 8004140:	e006      	b.n	8004150 <UART_SetConfig+0x11d8>
 8004142:	4b81      	ldr	r3, [pc, #516]	; (8004348 <UART_SetConfig+0x13d0>)
 8004144:	e004      	b.n	8004150 <UART_SetConfig+0x11d8>
 8004146:	4b81      	ldr	r3, [pc, #516]	; (800434c <UART_SetConfig+0x13d4>)
 8004148:	e002      	b.n	8004150 <UART_SetConfig+0x11d8>
 800414a:	4b81      	ldr	r3, [pc, #516]	; (8004350 <UART_SetConfig+0x13d8>)
 800414c:	e000      	b.n	8004150 <UART_SetConfig+0x11d8>
 800414e:	4b76      	ldr	r3, [pc, #472]	; (8004328 <UART_SetConfig+0x13b0>)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6852      	ldr	r2, [r2, #4]
 8004154:	0852      	lsrs	r2, r2, #1
 8004156:	441a      	add	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	b29b      	uxth	r3, r3
 8004162:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004164:	e0bd      	b.n	80042e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fd ff91 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800416a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d044      	beq.n	80041fe <UART_SetConfig+0x1286>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2b01      	cmp	r3, #1
 800417a:	d03e      	beq.n	80041fa <UART_SetConfig+0x1282>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	2b02      	cmp	r3, #2
 8004182:	d038      	beq.n	80041f6 <UART_SetConfig+0x127e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2b03      	cmp	r3, #3
 800418a:	d032      	beq.n	80041f2 <UART_SetConfig+0x127a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2b04      	cmp	r3, #4
 8004192:	d02c      	beq.n	80041ee <UART_SetConfig+0x1276>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2b05      	cmp	r3, #5
 800419a:	d026      	beq.n	80041ea <UART_SetConfig+0x1272>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d020      	beq.n	80041e6 <UART_SetConfig+0x126e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b07      	cmp	r3, #7
 80041aa:	d01a      	beq.n	80041e2 <UART_SetConfig+0x126a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d014      	beq.n	80041de <UART_SetConfig+0x1266>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b09      	cmp	r3, #9
 80041ba:	d00e      	beq.n	80041da <UART_SetConfig+0x1262>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b0a      	cmp	r3, #10
 80041c2:	d008      	beq.n	80041d6 <UART_SetConfig+0x125e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2b0b      	cmp	r3, #11
 80041ca:	d102      	bne.n	80041d2 <UART_SetConfig+0x125a>
 80041cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041d0:	e016      	b.n	8004200 <UART_SetConfig+0x1288>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e014      	b.n	8004200 <UART_SetConfig+0x1288>
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	e012      	b.n	8004200 <UART_SetConfig+0x1288>
 80041da:	2340      	movs	r3, #64	; 0x40
 80041dc:	e010      	b.n	8004200 <UART_SetConfig+0x1288>
 80041de:	2320      	movs	r3, #32
 80041e0:	e00e      	b.n	8004200 <UART_SetConfig+0x1288>
 80041e2:	2310      	movs	r3, #16
 80041e4:	e00c      	b.n	8004200 <UART_SetConfig+0x1288>
 80041e6:	230c      	movs	r3, #12
 80041e8:	e00a      	b.n	8004200 <UART_SetConfig+0x1288>
 80041ea:	230a      	movs	r3, #10
 80041ec:	e008      	b.n	8004200 <UART_SetConfig+0x1288>
 80041ee:	2308      	movs	r3, #8
 80041f0:	e006      	b.n	8004200 <UART_SetConfig+0x1288>
 80041f2:	2306      	movs	r3, #6
 80041f4:	e004      	b.n	8004200 <UART_SetConfig+0x1288>
 80041f6:	2304      	movs	r3, #4
 80041f8:	e002      	b.n	8004200 <UART_SetConfig+0x1288>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e000      	b.n	8004200 <UART_SetConfig+0x1288>
 80041fe:	2301      	movs	r3, #1
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	fbb2 f2f3 	udiv	r2, r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	441a      	add	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	b29b      	uxth	r3, r3
 8004218:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800421a:	e062      	b.n	80042e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	2b00      	cmp	r3, #0
 8004222:	d04e      	beq.n	80042c2 <UART_SetConfig+0x134a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	2b01      	cmp	r3, #1
 800422a:	d047      	beq.n	80042bc <UART_SetConfig+0x1344>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2b02      	cmp	r3, #2
 8004232:	d040      	beq.n	80042b6 <UART_SetConfig+0x133e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	2b03      	cmp	r3, #3
 800423a:	d039      	beq.n	80042b0 <UART_SetConfig+0x1338>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	2b04      	cmp	r3, #4
 8004242:	d032      	beq.n	80042aa <UART_SetConfig+0x1332>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	2b05      	cmp	r3, #5
 800424a:	d02b      	beq.n	80042a4 <UART_SetConfig+0x132c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b06      	cmp	r3, #6
 8004252:	d024      	beq.n	800429e <UART_SetConfig+0x1326>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b07      	cmp	r3, #7
 800425a:	d01d      	beq.n	8004298 <UART_SetConfig+0x1320>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b08      	cmp	r3, #8
 8004262:	d016      	beq.n	8004292 <UART_SetConfig+0x131a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b09      	cmp	r3, #9
 800426a:	d00f      	beq.n	800428c <UART_SetConfig+0x1314>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2b0a      	cmp	r3, #10
 8004272:	d008      	beq.n	8004286 <UART_SetConfig+0x130e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b0b      	cmp	r3, #11
 800427a:	d101      	bne.n	8004280 <UART_SetConfig+0x1308>
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	e022      	b.n	80042c6 <UART_SetConfig+0x134e>
 8004280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004284:	e01f      	b.n	80042c6 <UART_SetConfig+0x134e>
 8004286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800428a:	e01c      	b.n	80042c6 <UART_SetConfig+0x134e>
 800428c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004290:	e019      	b.n	80042c6 <UART_SetConfig+0x134e>
 8004292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004296:	e016      	b.n	80042c6 <UART_SetConfig+0x134e>
 8004298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800429c:	e013      	b.n	80042c6 <UART_SetConfig+0x134e>
 800429e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80042a2:	e010      	b.n	80042c6 <UART_SetConfig+0x134e>
 80042a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80042a8:	e00d      	b.n	80042c6 <UART_SetConfig+0x134e>
 80042aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ae:	e00a      	b.n	80042c6 <UART_SetConfig+0x134e>
 80042b0:	f241 5355 	movw	r3, #5461	; 0x1555
 80042b4:	e007      	b.n	80042c6 <UART_SetConfig+0x134e>
 80042b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ba:	e004      	b.n	80042c6 <UART_SetConfig+0x134e>
 80042bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042c0:	e001      	b.n	80042c6 <UART_SetConfig+0x134e>
 80042c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6852      	ldr	r2, [r2, #4]
 80042ca:	0852      	lsrs	r2, r2, #1
 80042cc:	441a      	add	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80042da:	e002      	b.n	80042e2 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	76fb      	strb	r3, [r7, #27]
        break;
 80042e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b0f      	cmp	r3, #15
 80042e6:	d908      	bls.n	80042fa <UART_SetConfig+0x1382>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d204      	bcs.n	80042fa <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e001      	b.n	80042fe <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800431a:	7efb      	ldrb	r3, [r7, #27]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004326:	bf00      	nop
 8004328:	00f42400 	.word	0x00f42400
 800432c:	0001e848 	.word	0x0001e848
 8004330:	0003d090 	.word	0x0003d090
 8004334:	0007a120 	.word	0x0007a120
 8004338:	000f4240 	.word	0x000f4240
 800433c:	00145855 	.word	0x00145855
 8004340:	00186a00 	.word	0x00186a00
 8004344:	001e8480 	.word	0x001e8480
 8004348:	0028b0aa 	.word	0x0028b0aa
 800434c:	003d0900 	.word	0x003d0900
 8004350:	007a1200 	.word	0x007a1200

08004354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01a      	beq.n	800446a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004452:	d10a      	bne.n	800446a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af02      	add	r7, sp, #8
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044a8:	f7fc fc68 	bl	8000d7c <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d10e      	bne.n	80044da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f82c 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e022      	b.n	8004520 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d10e      	bne.n	8004506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f816 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e00c      	b.n	8004520 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004538:	e062      	b.n	8004600 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d05e      	beq.n	8004600 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7fc fc1b 	bl	8000d7c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <UART_WaitOnFlagUntilTimeout+0x30>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11d      	bne.n	8004594 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004566:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e045      	b.n	8004620 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02e      	beq.n	8004600 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b0:	d126      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ba:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045ca:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e00f      	b.n	8004620 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	429a      	cmp	r2, r3
 800461c:	d08d      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UARTEx_DisableFifoMode+0x16>
 800463a:	2302      	movs	r3, #2
 800463c:	e027      	b.n	800468e <HAL_UARTEx_DisableFifoMode+0x66>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2224      	movs	r2, #36	; 0x24
 800464a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800466c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e02d      	b.n	800470e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2224      	movs	r2, #36	; 0x24
 80046be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f850 	bl	8004794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800472a:	2302      	movs	r3, #2
 800472c:	e02d      	b.n	800478a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2224      	movs	r2, #36	; 0x24
 800473a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f812 	bl	8004794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800479c:	4a2f      	ldr	r2, [pc, #188]	; (800485c <UARTEx_SetNbDataToProcess+0xc8>)
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047a6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047aa:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <UARTEx_SetNbDataToProcess+0xcc>)
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047b4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d108      	bne.n	80047d2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047d0:	e03d      	b.n	800484e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047d2:	2308      	movs	r3, #8
 80047d4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047d6:	2308      	movs	r3, #8
 80047d8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	0e5b      	lsrs	r3, r3, #25
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	0f5b      	lsrs	r3, r3, #29
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80047fa:	7fbb      	ldrb	r3, [r7, #30]
 80047fc:	7f3a      	ldrb	r2, [r7, #28]
 80047fe:	f107 0120 	add.w	r1, r7, #32
 8004802:	440a      	add	r2, r1
 8004804:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	7f3a      	ldrb	r2, [r7, #28]
 800480e:	f107 0120 	add.w	r1, r7, #32
 8004812:	440a      	add	r2, r1
 8004814:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004818:	fb93 f3f2 	sdiv	r3, r3, r2
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004824:	7ffb      	ldrb	r3, [r7, #31]
 8004826:	7f7a      	ldrb	r2, [r7, #29]
 8004828:	f107 0120 	add.w	r1, r7, #32
 800482c:	440a      	add	r2, r1
 800482e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	7f7a      	ldrb	r2, [r7, #29]
 8004838:	f107 0120 	add.w	r1, r7, #32
 800483c:	440a      	add	r2, r1
 800483e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004842:	fb93 f3f2 	sdiv	r3, r3, r2
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800484e:	bf00      	nop
 8004850:	3724      	adds	r7, #36	; 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	08005478 	.word	0x08005478
 8004860:	08005480 	.word	0x08005480

08004864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004864:	b084      	sub	sp, #16
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	f107 001c 	add.w	r0, r7, #28
 8004872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2b01      	cmp	r3, #1
 800487a:	d122      	bne.n	80048c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d105      	bne.n	80048b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8aa 	bl	8004a10 <USB_CoreReset>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]
 80048c0:	e01a      	b.n	80048f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f89e 	bl	8004a10 <USB_CoreReset>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
 80048ea:	e005      	b.n	80048f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004904:	b004      	add	sp, #16
 8004906:	4770      	bx	lr

08004908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 0201 	bic.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	e00b      	b.n	800496e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e001      	b.n	800496e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e003      	b.n	8004976 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800496e:	2032      	movs	r0, #50	; 0x32
 8004970:	f7fc fa10 	bl	8000d94 <HAL_Delay>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	019b      	lsls	r3, r3, #6
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <USB_FlushTxFifo+0x48>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e006      	b.n	80049ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d0f0      	beq.n	800499a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	00030d40 	.word	0x00030d40

080049cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2210      	movs	r2, #16
 80049dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <USB_FlushRxFifo+0x40>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e006      	b.n	80049fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d0f0      	beq.n	80049de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	00030d40 	.word	0x00030d40

08004a10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <USB_CoreReset+0x64>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e01b      	b.n	8004a66 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	daf2      	bge.n	8004a1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f043 0201 	orr.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <USB_CoreReset+0x64>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e006      	b.n	8004a66 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d0f0      	beq.n	8004a46 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	00030d40 	.word	0x00030d40

08004a78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a78:	b084      	sub	sp, #16
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	f107 001c 	add.w	r0, r7, #28
 8004a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a94:	461a      	mov	r2, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ac6:	2110      	movs	r1, #16
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ff59 	bl	8004980 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff ff7c 	bl	80049cc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e015      	b.n	8004b06 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	461a      	mov	r2, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3e5      	bcc.n	8004ada <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004b0e:	2101      	movs	r1, #1
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f82f 	bl	8004b74 <USB_DriveVbus>

  HAL_Delay(200U);
 8004b16:	20c8      	movs	r0, #200	; 0xc8
 8004b18:	f7fc f93c 	bl	8000d94 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295
 8004b28:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <USB_HostInit+0xf0>)
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <USB_HostInit+0xf4>)
 8004b3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f043 0210 	orr.w	r2, r3, #16
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <USB_HostInit+0xf8>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b62:	b004      	add	sp, #16
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	00600080 	.word	0x00600080
 8004b6c:	004000e0 	.word	0x004000e0
 8004b70:	a3200008 	.word	0xa3200008

08004b74 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <USB_DriveVbus+0x44>
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d106      	bne.n	8004bb8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bb6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc2:	d109      	bne.n	8004bd8 <USB_DriveVbus+0x64>
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <__errno>:
 8004be8:	4b01      	ldr	r3, [pc, #4]	; (8004bf0 <__errno+0x8>)
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000000c 	.word	0x2000000c

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4e0d      	ldr	r6, [pc, #52]	; (8004c2c <__libc_init_array+0x38>)
 8004bf8:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfa:	1ba4      	subs	r4, r4, r6
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	2500      	movs	r5, #0
 8004c00:	42a5      	cmp	r5, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	4e0b      	ldr	r6, [pc, #44]	; (8004c34 <__libc_init_array+0x40>)
 8004c06:	4c0c      	ldr	r4, [pc, #48]	; (8004c38 <__libc_init_array+0x44>)
 8004c08:	f000 fc26 	bl	8005458 <_init>
 8004c0c:	1ba4      	subs	r4, r4, r6
 8004c0e:	10a4      	asrs	r4, r4, #2
 8004c10:	2500      	movs	r5, #0
 8004c12:	42a5      	cmp	r5, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c1c:	4798      	blx	r3
 8004c1e:	3501      	adds	r5, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c26:	4798      	blx	r3
 8004c28:	3501      	adds	r5, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	0800550c 	.word	0x0800550c
 8004c30:	0800550c 	.word	0x0800550c
 8004c34:	0800550c 	.word	0x0800550c
 8004c38:	08005510 	.word	0x08005510

08004c3c <memset>:
 8004c3c:	4402      	add	r2, r0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d100      	bne.n	8004c46 <memset+0xa>
 8004c44:	4770      	bx	lr
 8004c46:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4a:	e7f9      	b.n	8004c40 <memset+0x4>

08004c4c <siprintf>:
 8004c4c:	b40e      	push	{r1, r2, r3}
 8004c4e:	b500      	push	{lr}
 8004c50:	b09c      	sub	sp, #112	; 0x70
 8004c52:	ab1d      	add	r3, sp, #116	; 0x74
 8004c54:	9002      	str	r0, [sp, #8]
 8004c56:	9006      	str	r0, [sp, #24]
 8004c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c5c:	4809      	ldr	r0, [pc, #36]	; (8004c84 <siprintf+0x38>)
 8004c5e:	9107      	str	r1, [sp, #28]
 8004c60:	9104      	str	r1, [sp, #16]
 8004c62:	4909      	ldr	r1, [pc, #36]	; (8004c88 <siprintf+0x3c>)
 8004c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c68:	9105      	str	r1, [sp, #20]
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	a902      	add	r1, sp, #8
 8004c70:	f000 f866 	bl	8004d40 <_svfiprintf_r>
 8004c74:	9b02      	ldr	r3, [sp, #8]
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	b01c      	add	sp, #112	; 0x70
 8004c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c80:	b003      	add	sp, #12
 8004c82:	4770      	bx	lr
 8004c84:	2000000c 	.word	0x2000000c
 8004c88:	ffff0208 	.word	0xffff0208

08004c8c <__ssputs_r>:
 8004c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	688e      	ldr	r6, [r1, #8]
 8004c92:	429e      	cmp	r6, r3
 8004c94:	4682      	mov	sl, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	4690      	mov	r8, r2
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	d837      	bhi.n	8004d0e <__ssputs_r+0x82>
 8004c9e:	898a      	ldrh	r2, [r1, #12]
 8004ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ca4:	d031      	beq.n	8004d0a <__ssputs_r+0x7e>
 8004ca6:	6825      	ldr	r5, [r4, #0]
 8004ca8:	6909      	ldr	r1, [r1, #16]
 8004caa:	1a6f      	subs	r7, r5, r1
 8004cac:	6965      	ldr	r5, [r4, #20]
 8004cae:	2302      	movs	r3, #2
 8004cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004cb8:	f109 0301 	add.w	r3, r9, #1
 8004cbc:	443b      	add	r3, r7
 8004cbe:	429d      	cmp	r5, r3
 8004cc0:	bf38      	it	cc
 8004cc2:	461d      	movcc	r5, r3
 8004cc4:	0553      	lsls	r3, r2, #21
 8004cc6:	d530      	bpl.n	8004d2a <__ssputs_r+0x9e>
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f000 fb2b 	bl	8005324 <_malloc_r>
 8004cce:	4606      	mov	r6, r0
 8004cd0:	b950      	cbnz	r0, 8004ce8 <__ssputs_r+0x5c>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	f8ca 3000 	str.w	r3, [sl]
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cde:	81a3      	strh	r3, [r4, #12]
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce8:	463a      	mov	r2, r7
 8004cea:	6921      	ldr	r1, [r4, #16]
 8004cec:	f000 faa8 	bl	8005240 <memcpy>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	6126      	str	r6, [r4, #16]
 8004cfe:	6165      	str	r5, [r4, #20]
 8004d00:	443e      	add	r6, r7
 8004d02:	1bed      	subs	r5, r5, r7
 8004d04:	6026      	str	r6, [r4, #0]
 8004d06:	60a5      	str	r5, [r4, #8]
 8004d08:	464e      	mov	r6, r9
 8004d0a:	454e      	cmp	r6, r9
 8004d0c:	d900      	bls.n	8004d10 <__ssputs_r+0x84>
 8004d0e:	464e      	mov	r6, r9
 8004d10:	4632      	mov	r2, r6
 8004d12:	4641      	mov	r1, r8
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	f000 fa9e 	bl	8005256 <memmove>
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	1b9b      	subs	r3, r3, r6
 8004d1e:	60a3      	str	r3, [r4, #8]
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	441e      	add	r6, r3
 8004d24:	6026      	str	r6, [r4, #0]
 8004d26:	2000      	movs	r0, #0
 8004d28:	e7dc      	b.n	8004ce4 <__ssputs_r+0x58>
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	f000 fb54 	bl	80053d8 <_realloc_r>
 8004d30:	4606      	mov	r6, r0
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d1e2      	bne.n	8004cfc <__ssputs_r+0x70>
 8004d36:	6921      	ldr	r1, [r4, #16]
 8004d38:	4650      	mov	r0, sl
 8004d3a:	f000 faa5 	bl	8005288 <_free_r>
 8004d3e:	e7c8      	b.n	8004cd2 <__ssputs_r+0x46>

08004d40 <_svfiprintf_r>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	461d      	mov	r5, r3
 8004d46:	898b      	ldrh	r3, [r1, #12]
 8004d48:	061f      	lsls	r7, r3, #24
 8004d4a:	b09d      	sub	sp, #116	; 0x74
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4616      	mov	r6, r2
 8004d52:	d50f      	bpl.n	8004d74 <_svfiprintf_r+0x34>
 8004d54:	690b      	ldr	r3, [r1, #16]
 8004d56:	b96b      	cbnz	r3, 8004d74 <_svfiprintf_r+0x34>
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	f000 fae3 	bl	8005324 <_malloc_r>
 8004d5e:	6020      	str	r0, [r4, #0]
 8004d60:	6120      	str	r0, [r4, #16]
 8004d62:	b928      	cbnz	r0, 8004d70 <_svfiprintf_r+0x30>
 8004d64:	230c      	movs	r3, #12
 8004d66:	f8c8 3000 	str.w	r3, [r8]
 8004d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6e:	e0c8      	b.n	8004f02 <_svfiprintf_r+0x1c2>
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	6163      	str	r3, [r4, #20]
 8004d74:	2300      	movs	r3, #0
 8004d76:	9309      	str	r3, [sp, #36]	; 0x24
 8004d78:	2320      	movs	r3, #32
 8004d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d7e:	2330      	movs	r3, #48	; 0x30
 8004d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d84:	9503      	str	r5, [sp, #12]
 8004d86:	f04f 0b01 	mov.w	fp, #1
 8004d8a:	4637      	mov	r7, r6
 8004d8c:	463d      	mov	r5, r7
 8004d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d92:	b10b      	cbz	r3, 8004d98 <_svfiprintf_r+0x58>
 8004d94:	2b25      	cmp	r3, #37	; 0x25
 8004d96:	d13e      	bne.n	8004e16 <_svfiprintf_r+0xd6>
 8004d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8004d9c:	d00b      	beq.n	8004db6 <_svfiprintf_r+0x76>
 8004d9e:	4653      	mov	r3, sl
 8004da0:	4632      	mov	r2, r6
 8004da2:	4621      	mov	r1, r4
 8004da4:	4640      	mov	r0, r8
 8004da6:	f7ff ff71 	bl	8004c8c <__ssputs_r>
 8004daa:	3001      	adds	r0, #1
 8004dac:	f000 80a4 	beq.w	8004ef8 <_svfiprintf_r+0x1b8>
 8004db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db2:	4453      	add	r3, sl
 8004db4:	9309      	str	r3, [sp, #36]	; 0x24
 8004db6:	783b      	ldrb	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 809d 	beq.w	8004ef8 <_svfiprintf_r+0x1b8>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	9307      	str	r3, [sp, #28]
 8004dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8004dd2:	462f      	mov	r7, r5
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004dda:	4850      	ldr	r0, [pc, #320]	; (8004f1c <_svfiprintf_r+0x1dc>)
 8004ddc:	f7fb fa18 	bl	8000210 <memchr>
 8004de0:	9b04      	ldr	r3, [sp, #16]
 8004de2:	b9d0      	cbnz	r0, 8004e1a <_svfiprintf_r+0xda>
 8004de4:	06d9      	lsls	r1, r3, #27
 8004de6:	bf44      	itt	mi
 8004de8:	2220      	movmi	r2, #32
 8004dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dee:	071a      	lsls	r2, r3, #28
 8004df0:	bf44      	itt	mi
 8004df2:	222b      	movmi	r2, #43	; 0x2b
 8004df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004df8:	782a      	ldrb	r2, [r5, #0]
 8004dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8004dfc:	d015      	beq.n	8004e2a <_svfiprintf_r+0xea>
 8004dfe:	9a07      	ldr	r2, [sp, #28]
 8004e00:	462f      	mov	r7, r5
 8004e02:	2000      	movs	r0, #0
 8004e04:	250a      	movs	r5, #10
 8004e06:	4639      	mov	r1, r7
 8004e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e0c:	3b30      	subs	r3, #48	; 0x30
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	d94d      	bls.n	8004eae <_svfiprintf_r+0x16e>
 8004e12:	b1b8      	cbz	r0, 8004e44 <_svfiprintf_r+0x104>
 8004e14:	e00f      	b.n	8004e36 <_svfiprintf_r+0xf6>
 8004e16:	462f      	mov	r7, r5
 8004e18:	e7b8      	b.n	8004d8c <_svfiprintf_r+0x4c>
 8004e1a:	4a40      	ldr	r2, [pc, #256]	; (8004f1c <_svfiprintf_r+0x1dc>)
 8004e1c:	1a80      	subs	r0, r0, r2
 8004e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8004e22:	4318      	orrs	r0, r3
 8004e24:	9004      	str	r0, [sp, #16]
 8004e26:	463d      	mov	r5, r7
 8004e28:	e7d3      	b.n	8004dd2 <_svfiprintf_r+0x92>
 8004e2a:	9a03      	ldr	r2, [sp, #12]
 8004e2c:	1d11      	adds	r1, r2, #4
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	9103      	str	r1, [sp, #12]
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	db01      	blt.n	8004e3a <_svfiprintf_r+0xfa>
 8004e36:	9207      	str	r2, [sp, #28]
 8004e38:	e004      	b.n	8004e44 <_svfiprintf_r+0x104>
 8004e3a:	4252      	negs	r2, r2
 8004e3c:	f043 0302 	orr.w	r3, r3, #2
 8004e40:	9207      	str	r2, [sp, #28]
 8004e42:	9304      	str	r3, [sp, #16]
 8004e44:	783b      	ldrb	r3, [r7, #0]
 8004e46:	2b2e      	cmp	r3, #46	; 0x2e
 8004e48:	d10c      	bne.n	8004e64 <_svfiprintf_r+0x124>
 8004e4a:	787b      	ldrb	r3, [r7, #1]
 8004e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4e:	d133      	bne.n	8004eb8 <_svfiprintf_r+0x178>
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	9203      	str	r2, [sp, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bfb8      	it	lt
 8004e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e60:	3702      	adds	r7, #2
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	4d2e      	ldr	r5, [pc, #184]	; (8004f20 <_svfiprintf_r+0x1e0>)
 8004e66:	7839      	ldrb	r1, [r7, #0]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f7fb f9d0 	bl	8000210 <memchr>
 8004e70:	b138      	cbz	r0, 8004e82 <_svfiprintf_r+0x142>
 8004e72:	2340      	movs	r3, #64	; 0x40
 8004e74:	1b40      	subs	r0, r0, r5
 8004e76:	fa03 f000 	lsl.w	r0, r3, r0
 8004e7a:	9b04      	ldr	r3, [sp, #16]
 8004e7c:	4303      	orrs	r3, r0
 8004e7e:	3701      	adds	r7, #1
 8004e80:	9304      	str	r3, [sp, #16]
 8004e82:	7839      	ldrb	r1, [r7, #0]
 8004e84:	4827      	ldr	r0, [pc, #156]	; (8004f24 <_svfiprintf_r+0x1e4>)
 8004e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e8a:	2206      	movs	r2, #6
 8004e8c:	1c7e      	adds	r6, r7, #1
 8004e8e:	f7fb f9bf 	bl	8000210 <memchr>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d038      	beq.n	8004f08 <_svfiprintf_r+0x1c8>
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <_svfiprintf_r+0x1e8>)
 8004e98:	bb13      	cbnz	r3, 8004ee0 <_svfiprintf_r+0x1a0>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea8:	444b      	add	r3, r9
 8004eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8004eac:	e76d      	b.n	8004d8a <_svfiprintf_r+0x4a>
 8004eae:	fb05 3202 	mla	r2, r5, r2, r3
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	460f      	mov	r7, r1
 8004eb6:	e7a6      	b.n	8004e06 <_svfiprintf_r+0xc6>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	3701      	adds	r7, #1
 8004ebc:	9305      	str	r3, [sp, #20]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	250a      	movs	r5, #10
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ec8:	3a30      	subs	r2, #48	; 0x30
 8004eca:	2a09      	cmp	r2, #9
 8004ecc:	d903      	bls.n	8004ed6 <_svfiprintf_r+0x196>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0c8      	beq.n	8004e64 <_svfiprintf_r+0x124>
 8004ed2:	9105      	str	r1, [sp, #20]
 8004ed4:	e7c6      	b.n	8004e64 <_svfiprintf_r+0x124>
 8004ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8004eda:	2301      	movs	r3, #1
 8004edc:	4607      	mov	r7, r0
 8004ede:	e7f0      	b.n	8004ec2 <_svfiprintf_r+0x182>
 8004ee0:	ab03      	add	r3, sp, #12
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <_svfiprintf_r+0x1ec>)
 8004ee8:	a904      	add	r1, sp, #16
 8004eea:	4640      	mov	r0, r8
 8004eec:	f3af 8000 	nop.w
 8004ef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ef4:	4681      	mov	r9, r0
 8004ef6:	d1d6      	bne.n	8004ea6 <_svfiprintf_r+0x166>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	065b      	lsls	r3, r3, #25
 8004efc:	f53f af35 	bmi.w	8004d6a <_svfiprintf_r+0x2a>
 8004f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f02:	b01d      	add	sp, #116	; 0x74
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	ab03      	add	r3, sp, #12
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <_svfiprintf_r+0x1ec>)
 8004f10:	a904      	add	r1, sp, #16
 8004f12:	4640      	mov	r0, r8
 8004f14:	f000 f882 	bl	800501c <_printf_i>
 8004f18:	e7ea      	b.n	8004ef0 <_svfiprintf_r+0x1b0>
 8004f1a:	bf00      	nop
 8004f1c:	080054d0 	.word	0x080054d0
 8004f20:	080054d6 	.word	0x080054d6
 8004f24:	080054da 	.word	0x080054da
 8004f28:	00000000 	.word	0x00000000
 8004f2c:	08004c8d 	.word	0x08004c8d

08004f30 <_printf_common>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	4691      	mov	r9, r2
 8004f36:	461f      	mov	r7, r3
 8004f38:	688a      	ldr	r2, [r1, #8]
 8004f3a:	690b      	ldr	r3, [r1, #16]
 8004f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f40:	4293      	cmp	r3, r2
 8004f42:	bfb8      	it	lt
 8004f44:	4613      	movlt	r3, r2
 8004f46:	f8c9 3000 	str.w	r3, [r9]
 8004f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f4e:	4606      	mov	r6, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	b112      	cbz	r2, 8004f5a <_printf_common+0x2a>
 8004f54:	3301      	adds	r3, #1
 8004f56:	f8c9 3000 	str.w	r3, [r9]
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	0699      	lsls	r1, r3, #26
 8004f5e:	bf42      	ittt	mi
 8004f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f64:	3302      	addmi	r3, #2
 8004f66:	f8c9 3000 	strmi.w	r3, [r9]
 8004f6a:	6825      	ldr	r5, [r4, #0]
 8004f6c:	f015 0506 	ands.w	r5, r5, #6
 8004f70:	d107      	bne.n	8004f82 <_printf_common+0x52>
 8004f72:	f104 0a19 	add.w	sl, r4, #25
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	f8d9 2000 	ldr.w	r2, [r9]
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	42ab      	cmp	r3, r5
 8004f80:	dc28      	bgt.n	8004fd4 <_printf_common+0xa4>
 8004f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	3300      	adds	r3, #0
 8004f8a:	bf18      	it	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	0692      	lsls	r2, r2, #26
 8004f90:	d42d      	bmi.n	8004fee <_printf_common+0xbe>
 8004f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f96:	4639      	mov	r1, r7
 8004f98:	4630      	mov	r0, r6
 8004f9a:	47c0      	blx	r8
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d020      	beq.n	8004fe2 <_printf_common+0xb2>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	68e5      	ldr	r5, [r4, #12]
 8004fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fa8:	f003 0306 	and.w	r3, r3, #6
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	bf08      	it	eq
 8004fb0:	1aad      	subeq	r5, r5, r2
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	bf0c      	ite	eq
 8004fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fbc:	2500      	movne	r5, #0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bfc4      	itt	gt
 8004fc2:	1a9b      	subgt	r3, r3, r2
 8004fc4:	18ed      	addgt	r5, r5, r3
 8004fc6:	f04f 0900 	mov.w	r9, #0
 8004fca:	341a      	adds	r4, #26
 8004fcc:	454d      	cmp	r5, r9
 8004fce:	d11a      	bne.n	8005006 <_printf_common+0xd6>
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e008      	b.n	8004fe6 <_printf_common+0xb6>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4630      	mov	r0, r6
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d103      	bne.n	8004fea <_printf_common+0xba>
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fea:	3501      	adds	r5, #1
 8004fec:	e7c3      	b.n	8004f76 <_printf_common+0x46>
 8004fee:	18e1      	adds	r1, r4, r3
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	2030      	movs	r0, #48	; 0x30
 8004ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff8:	4422      	add	r2, r4
 8004ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005002:	3302      	adds	r3, #2
 8005004:	e7c5      	b.n	8004f92 <_printf_common+0x62>
 8005006:	2301      	movs	r3, #1
 8005008:	4622      	mov	r2, r4
 800500a:	4639      	mov	r1, r7
 800500c:	4630      	mov	r0, r6
 800500e:	47c0      	blx	r8
 8005010:	3001      	adds	r0, #1
 8005012:	d0e6      	beq.n	8004fe2 <_printf_common+0xb2>
 8005014:	f109 0901 	add.w	r9, r9, #1
 8005018:	e7d8      	b.n	8004fcc <_printf_common+0x9c>
	...

0800501c <_printf_i>:
 800501c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005024:	460c      	mov	r4, r1
 8005026:	7e09      	ldrb	r1, [r1, #24]
 8005028:	b085      	sub	sp, #20
 800502a:	296e      	cmp	r1, #110	; 0x6e
 800502c:	4617      	mov	r7, r2
 800502e:	4606      	mov	r6, r0
 8005030:	4698      	mov	r8, r3
 8005032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005034:	f000 80b3 	beq.w	800519e <_printf_i+0x182>
 8005038:	d822      	bhi.n	8005080 <_printf_i+0x64>
 800503a:	2963      	cmp	r1, #99	; 0x63
 800503c:	d036      	beq.n	80050ac <_printf_i+0x90>
 800503e:	d80a      	bhi.n	8005056 <_printf_i+0x3a>
 8005040:	2900      	cmp	r1, #0
 8005042:	f000 80b9 	beq.w	80051b8 <_printf_i+0x19c>
 8005046:	2958      	cmp	r1, #88	; 0x58
 8005048:	f000 8083 	beq.w	8005152 <_printf_i+0x136>
 800504c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005054:	e032      	b.n	80050bc <_printf_i+0xa0>
 8005056:	2964      	cmp	r1, #100	; 0x64
 8005058:	d001      	beq.n	800505e <_printf_i+0x42>
 800505a:	2969      	cmp	r1, #105	; 0x69
 800505c:	d1f6      	bne.n	800504c <_printf_i+0x30>
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	0605      	lsls	r5, r0, #24
 8005064:	f103 0104 	add.w	r1, r3, #4
 8005068:	d52a      	bpl.n	80050c0 <_printf_i+0xa4>
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6011      	str	r1, [r2, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	da03      	bge.n	800507a <_printf_i+0x5e>
 8005072:	222d      	movs	r2, #45	; 0x2d
 8005074:	425b      	negs	r3, r3
 8005076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800507a:	486f      	ldr	r0, [pc, #444]	; (8005238 <_printf_i+0x21c>)
 800507c:	220a      	movs	r2, #10
 800507e:	e039      	b.n	80050f4 <_printf_i+0xd8>
 8005080:	2973      	cmp	r1, #115	; 0x73
 8005082:	f000 809d 	beq.w	80051c0 <_printf_i+0x1a4>
 8005086:	d808      	bhi.n	800509a <_printf_i+0x7e>
 8005088:	296f      	cmp	r1, #111	; 0x6f
 800508a:	d020      	beq.n	80050ce <_printf_i+0xb2>
 800508c:	2970      	cmp	r1, #112	; 0x70
 800508e:	d1dd      	bne.n	800504c <_printf_i+0x30>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	f043 0320 	orr.w	r3, r3, #32
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	e003      	b.n	80050a2 <_printf_i+0x86>
 800509a:	2975      	cmp	r1, #117	; 0x75
 800509c:	d017      	beq.n	80050ce <_printf_i+0xb2>
 800509e:	2978      	cmp	r1, #120	; 0x78
 80050a0:	d1d4      	bne.n	800504c <_printf_i+0x30>
 80050a2:	2378      	movs	r3, #120	; 0x78
 80050a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050a8:	4864      	ldr	r0, [pc, #400]	; (800523c <_printf_i+0x220>)
 80050aa:	e055      	b.n	8005158 <_printf_i+0x13c>
 80050ac:	6813      	ldr	r3, [r2, #0]
 80050ae:	1d19      	adds	r1, r3, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6011      	str	r1, [r2, #0]
 80050b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050bc:	2301      	movs	r3, #1
 80050be:	e08c      	b.n	80051da <_printf_i+0x1be>
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6011      	str	r1, [r2, #0]
 80050c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050c8:	bf18      	it	ne
 80050ca:	b21b      	sxthne	r3, r3
 80050cc:	e7cf      	b.n	800506e <_printf_i+0x52>
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	6825      	ldr	r5, [r4, #0]
 80050d2:	1d18      	adds	r0, r3, #4
 80050d4:	6010      	str	r0, [r2, #0]
 80050d6:	0628      	lsls	r0, r5, #24
 80050d8:	d501      	bpl.n	80050de <_printf_i+0xc2>
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	e002      	b.n	80050e4 <_printf_i+0xc8>
 80050de:	0668      	lsls	r0, r5, #25
 80050e0:	d5fb      	bpl.n	80050da <_printf_i+0xbe>
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	4854      	ldr	r0, [pc, #336]	; (8005238 <_printf_i+0x21c>)
 80050e6:	296f      	cmp	r1, #111	; 0x6f
 80050e8:	bf14      	ite	ne
 80050ea:	220a      	movne	r2, #10
 80050ec:	2208      	moveq	r2, #8
 80050ee:	2100      	movs	r1, #0
 80050f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050f4:	6865      	ldr	r5, [r4, #4]
 80050f6:	60a5      	str	r5, [r4, #8]
 80050f8:	2d00      	cmp	r5, #0
 80050fa:	f2c0 8095 	blt.w	8005228 <_printf_i+0x20c>
 80050fe:	6821      	ldr	r1, [r4, #0]
 8005100:	f021 0104 	bic.w	r1, r1, #4
 8005104:	6021      	str	r1, [r4, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d13d      	bne.n	8005186 <_printf_i+0x16a>
 800510a:	2d00      	cmp	r5, #0
 800510c:	f040 808e 	bne.w	800522c <_printf_i+0x210>
 8005110:	4665      	mov	r5, ip
 8005112:	2a08      	cmp	r2, #8
 8005114:	d10b      	bne.n	800512e <_printf_i+0x112>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	07db      	lsls	r3, r3, #31
 800511a:	d508      	bpl.n	800512e <_printf_i+0x112>
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	6862      	ldr	r2, [r4, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	bfde      	ittt	le
 8005124:	2330      	movle	r3, #48	; 0x30
 8005126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800512a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800512e:	ebac 0305 	sub.w	r3, ip, r5
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	f8cd 8000 	str.w	r8, [sp]
 8005138:	463b      	mov	r3, r7
 800513a:	aa03      	add	r2, sp, #12
 800513c:	4621      	mov	r1, r4
 800513e:	4630      	mov	r0, r6
 8005140:	f7ff fef6 	bl	8004f30 <_printf_common>
 8005144:	3001      	adds	r0, #1
 8005146:	d14d      	bne.n	80051e4 <_printf_i+0x1c8>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	b005      	add	sp, #20
 800514e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005152:	4839      	ldr	r0, [pc, #228]	; (8005238 <_printf_i+0x21c>)
 8005154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	6821      	ldr	r1, [r4, #0]
 800515c:	1d1d      	adds	r5, r3, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6015      	str	r5, [r2, #0]
 8005162:	060a      	lsls	r2, r1, #24
 8005164:	d50b      	bpl.n	800517e <_printf_i+0x162>
 8005166:	07ca      	lsls	r2, r1, #31
 8005168:	bf44      	itt	mi
 800516a:	f041 0120 	orrmi.w	r1, r1, #32
 800516e:	6021      	strmi	r1, [r4, #0]
 8005170:	b91b      	cbnz	r3, 800517a <_printf_i+0x15e>
 8005172:	6822      	ldr	r2, [r4, #0]
 8005174:	f022 0220 	bic.w	r2, r2, #32
 8005178:	6022      	str	r2, [r4, #0]
 800517a:	2210      	movs	r2, #16
 800517c:	e7b7      	b.n	80050ee <_printf_i+0xd2>
 800517e:	064d      	lsls	r5, r1, #25
 8005180:	bf48      	it	mi
 8005182:	b29b      	uxthmi	r3, r3
 8005184:	e7ef      	b.n	8005166 <_printf_i+0x14a>
 8005186:	4665      	mov	r5, ip
 8005188:	fbb3 f1f2 	udiv	r1, r3, r2
 800518c:	fb02 3311 	mls	r3, r2, r1, r3
 8005190:	5cc3      	ldrb	r3, [r0, r3]
 8005192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005196:	460b      	mov	r3, r1
 8005198:	2900      	cmp	r1, #0
 800519a:	d1f5      	bne.n	8005188 <_printf_i+0x16c>
 800519c:	e7b9      	b.n	8005112 <_printf_i+0xf6>
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	6825      	ldr	r5, [r4, #0]
 80051a2:	6961      	ldr	r1, [r4, #20]
 80051a4:	1d18      	adds	r0, r3, #4
 80051a6:	6010      	str	r0, [r2, #0]
 80051a8:	0628      	lsls	r0, r5, #24
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	d501      	bpl.n	80051b2 <_printf_i+0x196>
 80051ae:	6019      	str	r1, [r3, #0]
 80051b0:	e002      	b.n	80051b8 <_printf_i+0x19c>
 80051b2:	066a      	lsls	r2, r5, #25
 80051b4:	d5fb      	bpl.n	80051ae <_printf_i+0x192>
 80051b6:	8019      	strh	r1, [r3, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	4665      	mov	r5, ip
 80051be:	e7b9      	b.n	8005134 <_printf_i+0x118>
 80051c0:	6813      	ldr	r3, [r2, #0]
 80051c2:	1d19      	adds	r1, r3, #4
 80051c4:	6011      	str	r1, [r2, #0]
 80051c6:	681d      	ldr	r5, [r3, #0]
 80051c8:	6862      	ldr	r2, [r4, #4]
 80051ca:	2100      	movs	r1, #0
 80051cc:	4628      	mov	r0, r5
 80051ce:	f7fb f81f 	bl	8000210 <memchr>
 80051d2:	b108      	cbz	r0, 80051d8 <_printf_i+0x1bc>
 80051d4:	1b40      	subs	r0, r0, r5
 80051d6:	6060      	str	r0, [r4, #4]
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	6123      	str	r3, [r4, #16]
 80051dc:	2300      	movs	r3, #0
 80051de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e2:	e7a7      	b.n	8005134 <_printf_i+0x118>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	462a      	mov	r2, r5
 80051e8:	4639      	mov	r1, r7
 80051ea:	4630      	mov	r0, r6
 80051ec:	47c0      	blx	r8
 80051ee:	3001      	adds	r0, #1
 80051f0:	d0aa      	beq.n	8005148 <_printf_i+0x12c>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	079b      	lsls	r3, r3, #30
 80051f6:	d413      	bmi.n	8005220 <_printf_i+0x204>
 80051f8:	68e0      	ldr	r0, [r4, #12]
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	4298      	cmp	r0, r3
 80051fe:	bfb8      	it	lt
 8005200:	4618      	movlt	r0, r3
 8005202:	e7a3      	b.n	800514c <_printf_i+0x130>
 8005204:	2301      	movs	r3, #1
 8005206:	464a      	mov	r2, r9
 8005208:	4639      	mov	r1, r7
 800520a:	4630      	mov	r0, r6
 800520c:	47c0      	blx	r8
 800520e:	3001      	adds	r0, #1
 8005210:	d09a      	beq.n	8005148 <_printf_i+0x12c>
 8005212:	3501      	adds	r5, #1
 8005214:	68e3      	ldr	r3, [r4, #12]
 8005216:	9a03      	ldr	r2, [sp, #12]
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	42ab      	cmp	r3, r5
 800521c:	dcf2      	bgt.n	8005204 <_printf_i+0x1e8>
 800521e:	e7eb      	b.n	80051f8 <_printf_i+0x1dc>
 8005220:	2500      	movs	r5, #0
 8005222:	f104 0919 	add.w	r9, r4, #25
 8005226:	e7f5      	b.n	8005214 <_printf_i+0x1f8>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ac      	bne.n	8005186 <_printf_i+0x16a>
 800522c:	7803      	ldrb	r3, [r0, #0]
 800522e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005236:	e76c      	b.n	8005112 <_printf_i+0xf6>
 8005238:	080054e1 	.word	0x080054e1
 800523c:	080054f2 	.word	0x080054f2

08005240 <memcpy>:
 8005240:	b510      	push	{r4, lr}
 8005242:	1e43      	subs	r3, r0, #1
 8005244:	440a      	add	r2, r1
 8005246:	4291      	cmp	r1, r2
 8005248:	d100      	bne.n	800524c <memcpy+0xc>
 800524a:	bd10      	pop	{r4, pc}
 800524c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005254:	e7f7      	b.n	8005246 <memcpy+0x6>

08005256 <memmove>:
 8005256:	4288      	cmp	r0, r1
 8005258:	b510      	push	{r4, lr}
 800525a:	eb01 0302 	add.w	r3, r1, r2
 800525e:	d807      	bhi.n	8005270 <memmove+0x1a>
 8005260:	1e42      	subs	r2, r0, #1
 8005262:	4299      	cmp	r1, r3
 8005264:	d00a      	beq.n	800527c <memmove+0x26>
 8005266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800526e:	e7f8      	b.n	8005262 <memmove+0xc>
 8005270:	4283      	cmp	r3, r0
 8005272:	d9f5      	bls.n	8005260 <memmove+0xa>
 8005274:	1881      	adds	r1, r0, r2
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	42d3      	cmn	r3, r2
 800527a:	d100      	bne.n	800527e <memmove+0x28>
 800527c:	bd10      	pop	{r4, pc}
 800527e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005282:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005286:	e7f7      	b.n	8005278 <memmove+0x22>

08005288 <_free_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4605      	mov	r5, r0
 800528c:	2900      	cmp	r1, #0
 800528e:	d045      	beq.n	800531c <_free_r+0x94>
 8005290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005294:	1f0c      	subs	r4, r1, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	bfb8      	it	lt
 800529a:	18e4      	addlt	r4, r4, r3
 800529c:	f000 f8d2 	bl	8005444 <__malloc_lock>
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <_free_r+0x98>)
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	4610      	mov	r0, r2
 80052a6:	b933      	cbnz	r3, 80052b6 <_free_r+0x2e>
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	6014      	str	r4, [r2, #0]
 80052ac:	4628      	mov	r0, r5
 80052ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052b2:	f000 b8c8 	b.w	8005446 <__malloc_unlock>
 80052b6:	42a3      	cmp	r3, r4
 80052b8:	d90c      	bls.n	80052d4 <_free_r+0x4c>
 80052ba:	6821      	ldr	r1, [r4, #0]
 80052bc:	1862      	adds	r2, r4, r1
 80052be:	4293      	cmp	r3, r2
 80052c0:	bf04      	itt	eq
 80052c2:	681a      	ldreq	r2, [r3, #0]
 80052c4:	685b      	ldreq	r3, [r3, #4]
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	bf04      	itt	eq
 80052ca:	1852      	addeq	r2, r2, r1
 80052cc:	6022      	streq	r2, [r4, #0]
 80052ce:	6004      	str	r4, [r0, #0]
 80052d0:	e7ec      	b.n	80052ac <_free_r+0x24>
 80052d2:	4613      	mov	r3, r2
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	b10a      	cbz	r2, 80052dc <_free_r+0x54>
 80052d8:	42a2      	cmp	r2, r4
 80052da:	d9fa      	bls.n	80052d2 <_free_r+0x4a>
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	1858      	adds	r0, r3, r1
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d10b      	bne.n	80052fc <_free_r+0x74>
 80052e4:	6820      	ldr	r0, [r4, #0]
 80052e6:	4401      	add	r1, r0
 80052e8:	1858      	adds	r0, r3, r1
 80052ea:	4282      	cmp	r2, r0
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	d1dd      	bne.n	80052ac <_free_r+0x24>
 80052f0:	6810      	ldr	r0, [r2, #0]
 80052f2:	6852      	ldr	r2, [r2, #4]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	4401      	add	r1, r0
 80052f8:	6019      	str	r1, [r3, #0]
 80052fa:	e7d7      	b.n	80052ac <_free_r+0x24>
 80052fc:	d902      	bls.n	8005304 <_free_r+0x7c>
 80052fe:	230c      	movs	r3, #12
 8005300:	602b      	str	r3, [r5, #0]
 8005302:	e7d3      	b.n	80052ac <_free_r+0x24>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	1821      	adds	r1, r4, r0
 8005308:	428a      	cmp	r2, r1
 800530a:	bf04      	itt	eq
 800530c:	6811      	ldreq	r1, [r2, #0]
 800530e:	6852      	ldreq	r2, [r2, #4]
 8005310:	6062      	str	r2, [r4, #4]
 8005312:	bf04      	itt	eq
 8005314:	1809      	addeq	r1, r1, r0
 8005316:	6021      	streq	r1, [r4, #0]
 8005318:	605c      	str	r4, [r3, #4]
 800531a:	e7c7      	b.n	80052ac <_free_r+0x24>
 800531c:	bd38      	pop	{r3, r4, r5, pc}
 800531e:	bf00      	nop
 8005320:	20000090 	.word	0x20000090

08005324 <_malloc_r>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	1ccd      	adds	r5, r1, #3
 8005328:	f025 0503 	bic.w	r5, r5, #3
 800532c:	3508      	adds	r5, #8
 800532e:	2d0c      	cmp	r5, #12
 8005330:	bf38      	it	cc
 8005332:	250c      	movcc	r5, #12
 8005334:	2d00      	cmp	r5, #0
 8005336:	4606      	mov	r6, r0
 8005338:	db01      	blt.n	800533e <_malloc_r+0x1a>
 800533a:	42a9      	cmp	r1, r5
 800533c:	d903      	bls.n	8005346 <_malloc_r+0x22>
 800533e:	230c      	movs	r3, #12
 8005340:	6033      	str	r3, [r6, #0]
 8005342:	2000      	movs	r0, #0
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	f000 f87d 	bl	8005444 <__malloc_lock>
 800534a:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <_malloc_r+0xac>)
 800534c:	6814      	ldr	r4, [r2, #0]
 800534e:	4621      	mov	r1, r4
 8005350:	b991      	cbnz	r1, 8005378 <_malloc_r+0x54>
 8005352:	4c20      	ldr	r4, [pc, #128]	; (80053d4 <_malloc_r+0xb0>)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	b91b      	cbnz	r3, 8005360 <_malloc_r+0x3c>
 8005358:	4630      	mov	r0, r6
 800535a:	f000 f863 	bl	8005424 <_sbrk_r>
 800535e:	6020      	str	r0, [r4, #0]
 8005360:	4629      	mov	r1, r5
 8005362:	4630      	mov	r0, r6
 8005364:	f000 f85e 	bl	8005424 <_sbrk_r>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d124      	bne.n	80053b6 <_malloc_r+0x92>
 800536c:	230c      	movs	r3, #12
 800536e:	6033      	str	r3, [r6, #0]
 8005370:	4630      	mov	r0, r6
 8005372:	f000 f868 	bl	8005446 <__malloc_unlock>
 8005376:	e7e4      	b.n	8005342 <_malloc_r+0x1e>
 8005378:	680b      	ldr	r3, [r1, #0]
 800537a:	1b5b      	subs	r3, r3, r5
 800537c:	d418      	bmi.n	80053b0 <_malloc_r+0x8c>
 800537e:	2b0b      	cmp	r3, #11
 8005380:	d90f      	bls.n	80053a2 <_malloc_r+0x7e>
 8005382:	600b      	str	r3, [r1, #0]
 8005384:	50cd      	str	r5, [r1, r3]
 8005386:	18cc      	adds	r4, r1, r3
 8005388:	4630      	mov	r0, r6
 800538a:	f000 f85c 	bl	8005446 <__malloc_unlock>
 800538e:	f104 000b 	add.w	r0, r4, #11
 8005392:	1d23      	adds	r3, r4, #4
 8005394:	f020 0007 	bic.w	r0, r0, #7
 8005398:	1ac3      	subs	r3, r0, r3
 800539a:	d0d3      	beq.n	8005344 <_malloc_r+0x20>
 800539c:	425a      	negs	r2, r3
 800539e:	50e2      	str	r2, [r4, r3]
 80053a0:	e7d0      	b.n	8005344 <_malloc_r+0x20>
 80053a2:	428c      	cmp	r4, r1
 80053a4:	684b      	ldr	r3, [r1, #4]
 80053a6:	bf16      	itet	ne
 80053a8:	6063      	strne	r3, [r4, #4]
 80053aa:	6013      	streq	r3, [r2, #0]
 80053ac:	460c      	movne	r4, r1
 80053ae:	e7eb      	b.n	8005388 <_malloc_r+0x64>
 80053b0:	460c      	mov	r4, r1
 80053b2:	6849      	ldr	r1, [r1, #4]
 80053b4:	e7cc      	b.n	8005350 <_malloc_r+0x2c>
 80053b6:	1cc4      	adds	r4, r0, #3
 80053b8:	f024 0403 	bic.w	r4, r4, #3
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d005      	beq.n	80053cc <_malloc_r+0xa8>
 80053c0:	1a21      	subs	r1, r4, r0
 80053c2:	4630      	mov	r0, r6
 80053c4:	f000 f82e 	bl	8005424 <_sbrk_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d0cf      	beq.n	800536c <_malloc_r+0x48>
 80053cc:	6025      	str	r5, [r4, #0]
 80053ce:	e7db      	b.n	8005388 <_malloc_r+0x64>
 80053d0:	20000090 	.word	0x20000090
 80053d4:	20000094 	.word	0x20000094

080053d8 <_realloc_r>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	4607      	mov	r7, r0
 80053dc:	4614      	mov	r4, r2
 80053de:	460e      	mov	r6, r1
 80053e0:	b921      	cbnz	r1, 80053ec <_realloc_r+0x14>
 80053e2:	4611      	mov	r1, r2
 80053e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053e8:	f7ff bf9c 	b.w	8005324 <_malloc_r>
 80053ec:	b922      	cbnz	r2, 80053f8 <_realloc_r+0x20>
 80053ee:	f7ff ff4b 	bl	8005288 <_free_r>
 80053f2:	4625      	mov	r5, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f8:	f000 f826 	bl	8005448 <_malloc_usable_size_r>
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d20f      	bcs.n	8005420 <_realloc_r+0x48>
 8005400:	4621      	mov	r1, r4
 8005402:	4638      	mov	r0, r7
 8005404:	f7ff ff8e 	bl	8005324 <_malloc_r>
 8005408:	4605      	mov	r5, r0
 800540a:	2800      	cmp	r0, #0
 800540c:	d0f2      	beq.n	80053f4 <_realloc_r+0x1c>
 800540e:	4631      	mov	r1, r6
 8005410:	4622      	mov	r2, r4
 8005412:	f7ff ff15 	bl	8005240 <memcpy>
 8005416:	4631      	mov	r1, r6
 8005418:	4638      	mov	r0, r7
 800541a:	f7ff ff35 	bl	8005288 <_free_r>
 800541e:	e7e9      	b.n	80053f4 <_realloc_r+0x1c>
 8005420:	4635      	mov	r5, r6
 8005422:	e7e7      	b.n	80053f4 <_realloc_r+0x1c>

08005424 <_sbrk_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4c06      	ldr	r4, [pc, #24]	; (8005440 <_sbrk_r+0x1c>)
 8005428:	2300      	movs	r3, #0
 800542a:	4605      	mov	r5, r0
 800542c:	4608      	mov	r0, r1
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	f7fb fbb4 	bl	8000b9c <_sbrk>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_sbrk_r+0x1a>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	b103      	cbz	r3, 800543e <_sbrk_r+0x1a>
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	20000478 	.word	0x20000478

08005444 <__malloc_lock>:
 8005444:	4770      	bx	lr

08005446 <__malloc_unlock>:
 8005446:	4770      	bx	lr

08005448 <_malloc_usable_size_r>:
 8005448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800544c:	1f18      	subs	r0, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfbc      	itt	lt
 8005452:	580b      	ldrlt	r3, [r1, r0]
 8005454:	18c0      	addlt	r0, r0, r3
 8005456:	4770      	bx	lr

08005458 <_init>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr

08005464 <_fini>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr
